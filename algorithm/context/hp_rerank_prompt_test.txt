User original query (TOP PRIORITY):
Discover causal relationships between protein signaling molecules. The data contains flow cytometry measurements of proteins and phospholipids.

## ⚠️ ESSENTIAL QUERY PRIORITY ⚠️
- User query SUPERSEDES all standard hyperparameter guidelines
- Extract specific needs, constraints, domain insights from user query FIRST
- Parameters MUST be adjusted to meet user's explicit requirements 
- ALL recommendations MUST directly align with the user's stated objectives
- User domain knowledge overrides general optimization guidelines

-----------------------------------------------
Given a dataset with the following properties:

1. Columns: Raf	Mek	Plcg	PIP2	PIP3	Erk	Akt	PKA	PKC	P38	Jnk
2. Statistics:
The dataset has the following characteristics:

Data Type: The overall data type is Continuous.

The sample size is 853 with 11 features. 

This dataset is not time-series data. 

Data Quality: There are no missing values in the dataset.

Statistical Properties:
- Linearity: The relationships between variables are not predominantly linear.
- Gaussian Errors: The errors in the data do not follow a Gaussian distribution.
- Heterogeneity: The dataset is not heterogeneous. 




3. Background Knowledge:
The provided variable names appear to be meaningful in the context of biological signaling pathways, particularly those involved in cellular processes like cell growth, proliferation, differentiation, and survival. Below is a detailed explanation of the variables, possible causal relations among them, and relevant background domain knowledge.

### 1. Detailed Explanation about the Variables

- **Raf**: A serine/threonine kinase that acts as a key component in the MAPK/ERK signaling pathway. It is activated by RAS and subsequently phosphorylates MEK.
  
- **Mek (MAP2K)**: MAP kinase/ERK kinase, which is activated by Raf. Mek phosphorylates and activates ERK, playing a crucial role in the signaling cascade.

- **Plcg (Phospholipase C-gamma)**: An enzyme that hydrolyzes PIP2 to produce inositol trisphosphate (IP3) and diacylglycerol (DAG). It is involved in various signaling pathways, including those regulating calcium release and protein kinase activation.

- **PIP2 (Phosphatidylinositol 4,5-bisphosphate)**: A phospholipid found in the inner leaflet of the plasma membrane that serves as a substrate for phospholipases and is involved in cellular signaling processes.

- **PIP3 (Phosphatidylinositol (3,4,5)-trisphosphate)**: A product of the phosphorylation of PIP2 by PI3-kinase. It acts as a secondary messenger in signaling pathways, particularly in promoting cell survival and growth.

- **Erk (Extracellular signal-regulated kinase)**: A downstream target of MEK. It is a key player in the MAPK signaling pathway affecting cell division, survival, and differentiation.

- **Akt (Protein kinase B)**: A central node in many signaling pathways. It is activated by PIP3 and plays crucial roles in regulating metabolism, cell survival, and growth.

- **PKA (Protein kinase A)**: A serine/threonine kinase activated by cyclic AMP (cAMP) that mediates various signaling effects in response to hormones and other stimuli.

- **PKC (Protein kinase C)**: A family of serine/threonine kinases activated by diacylglycerol (DAG) and calcium ions, involved in a variety of cellular processes including cell proliferation and differentiation.

- **P38 (MAPK)**: A member of the MAPK family activated by stress signals and involved in inflammation responses, apoptosis, and differentiation.

- **Jnk (c-Jun N-terminal kinase)**: Another MAPK that responds to stress and is involved in cell differentiation and apoptosis.

### 2. Possible Causal Relations among These Variables

Based on established biological pathways, the following causal relationships may exist:

- **Raf → Mek**: Raf activates Mek by phosphorylation.
- **Mek → Erk**: Mek activates Erk by phosphorylation.
- **Plcg → PIP2**: Phospholipase C-gamma hydrolyzes PIP2 from membranes.
- **PIP2 → PIP3**: PIP2 is phosphorylated to form PIP3, often by the action of PI3-kinase.
- **PIP3 → Akt**: PIP3 recruits Akt to the membrane, leading to its activation.
- **DAG → PKC**: DAG activates Protein Kinase C, promoting signaling.
- **Stress Signals → P38/Jnk**: Various stress signals can activate both P38 and JNK through upstream kinases.
- **Erk → Cell Cycle progression**: Erk influences the transcription of genes involved in the cell cycle and proliferation.

### 3. Other Background Domain Knowledge

To better design causal discovery algorithms, the following background knowledge can be useful:

- **Signaling Pathways**: Familiarity with the signaling pathways can inform assumptions about the directions and existence of causal links.
  
- **Temporal Dependencies**: Understanding time-series data or temporal dynamics in signaling can enhance causal inference since many interactions are time-dependent.

- **Feedback Mechanisms**: Many signaling pathways involve feedback loops that can complicate causal inference; these should be carefully modeled.

- **Experimental Validation**: Prior knowledge from experiments (e.g., knockdown studies) can inform causal relationships and help validate results from causal discovery algorithms.

- **Pathway Databases**: Tools like KEGG, Reactome, or BioCyc provide curated pathways that can help hypothesize potential interactions and causality in biological networks.

This information should serve well for causal discovery analysis in biological datasets.

We have selected the following algorithm for causal discovery:

Algorithm: FCI
Description: Fast Causal Inference (FCI) is a constraint-based algorithm that is robust to latent confounders and can handle flexible functional forms and noise distributions. It outputs a Partial Ancestral Graph (PAG), which represents causal relationships with potential latent variables.
FCI is the best choice for this dataset due to its ability to handle latent confounders, which are likely present in biological signaling pathways. It also manages non-linear relationships effectively with the rcit test, aligning with the dataset's non-linear characteristics. Additionally, FCI's performance in sparse graphs and its robustness to measurement error make it well-suited for the dataset's properties. The algorithm's output format (PAG) is also acceptable to the user, providing a comprehensive view of potential causal structures.

Now, we need to determine the optimal hyperparameters for this algorithm. I'll guide you through a systematic approach to select values that prioritize accuracy while maintaining computational efficiency for moderate graph sizes.

Primary hyperparameters to configure: alpha, indep_test, depth

For each hyperparameter, please follow this structured approach:

Step 1: Understand the dataset characteristics
   - Consider the number of variables (graph size)
   - Analyze sample size and data distribution
   - Note if data is linear/nonlinear, continuous/discrete/mixed
   - For time-series data, prioritize the statistically estimated lag order

Step 2: Assess computational resources
   - Consider the hardware constraints and GPU availability:
   
Current machine doesn't support CUDA, do not choose any GPU-powered algorithms.

   - Prioritize to GPU implemented hyperparameter when dealing with large graph (variable size > 100) to achieve more efficient speedup

Step 3: Evaluate each hyperparameter's impact on accuracy vs. efficiency
   - Critical parameters affecting accuracy (e.g., significance levels, independence tests)
   - Parameters affecting computational complexity (e.g., search depth, maximum conditions)
   - Parameters controlling sparsity (e.g., regularization, thresholds)

Step 4: Analyze algorithm-specific recommendations
   - Review expert suggestions for each parameter:
   "**Parameter:** alpha\n- **Meaning:** Desired significance level in (0, 1)\n- **Available Values:**\n  - 0.05\n  - 0.1\n  - 0.01\n- **Expert Suggestion:** Use 0.05 as default. Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01.\n\n**Parameter:** indep_test\n- **Meaning:** Independence test method\n- **Available Values:**\n  - fisherz\n  - chisq\n  - kci\n  - fastkci\n  - rcit\n- **Expert Suggestion:** Use fisherz as default (for linear data). Choose based on data type, DON'T use nonlinear/nonparametric tests for linear/discrete data. 'Fisherz' for linear data; 'chisq' for discrete data (only applied for pure discrete data); 'kci' for nonlinear data (very slow, use only when both condition fulfilled: variable size < 10 and sample size < 1500); 'rcit' is for non-linear data and the fastest approximation of kci (use only when both condition fulfilled: < 100 variables and sample size < 10000); 'fastkci' is for non-linear data and a divide-and-conquer version of kci, faster than kci in large sample size scenarios but less accurate (use only when both condition fulfilled: < 20 variables and sample size < 3000). For nonlinear data, as long as variable and sample size constraints are fulfilled, choose KCI > RCIT > FastKCI in order of accuracy.\n\n**Parameter:** depth\n- **Meaning:** Maximum depth for skeleton search\n- **Available Values:**\n  - -1\n  - 6\n  - 4\n  - 2\n  - 1\n- **Expert Suggestion:** Use -1 as default. Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1.\n\n"

Step 5: Make final decisions based on:
   - For moderate graph sizes (<50 variables), prioritize accuracy over speed
   - For large graphs (>50 variables), balance accuracy with feasibility and EFFICIENCY
   - For time-series data, carefully consider temporal parameters

Please provide your suggestions in a structured JSON format, with detailed reasoning for each hyperparameter. Your response should look like this:

{
  "algorithm": "FCI",
  "hyperparameters": {
    "[HYPERPARAMETER_1_NAME]": {
      "full_name": "[HYPERPARAMETER_1_FULL_NAME]",
      "reasoning": "[YOUR_STEP_BY_STEP_REASONING_PROCESS]",
      "value": [SUGGESTED_VALUE],
      "explanation": "[BRIEF_EXPLANATION_OF_TRADEOFFS]"
    },
    "[HYPERPARAMETER_2_NAME]": {
      "full_name": "[HYPERPARAMETER_2_FULL_NAME]",
      "reasoning": "[YOUR_STEP_BY_STEP_REASONING_PROCESS]",
      "value": [SUGGESTED_VALUE],
      "explanation": "[BRIEF_EXPLANATION_OF_TRADEOFFS]"
    }
  }
}

Important guidelines:
1. Only select values from the "available_values" list for each hyperparameter
2. For moderate graph sizes (10-50 variables), prioritize accuracy over speed
3. For time-series data, give special attention to lag parameters based on statistical estimates
4. Consider independence test selection carefully based on data type and computational resources
5. For regularization parameters, consider the expected graph density
6. For search depth parameters, consider the complexity of potential causal relationships

Please provide your hyperparameter suggestions following this JSON structure, with clear reasoning that demonstrates you've considered the dataset characteristics, algorithm requirements, and computational constraints.