# Causal Discovery Algorithm Tagging

Below is a concise description of each tag category and its possible values:

1. Availability: Indicates if the algorithm is ready to use.
    ***ONLY USE AVAILABLE ALGORITHMSFOR NOW***
   - Available: Ready to use in the current codebase.
   - Unavailable: No longer maintained because of being not useful.


2. Method Type: Reflects the underlying approach.
   - Constraint-based: Utilizes conditional independence tests.
   - Score-based: Leverages score metrics for structure learning.
   - Functional Model-based: Employs functional models (e.g., LiNGAM) to capture relationships.
   - Hybrid: Integrates Constraint-based and Functional Model-based approaches to combine strengths.
   - MB-based: Finding causal graph mainly by discovering, aggregating and orienting Markov Blankets.
   - Continuous-optimization: Uses continuous optimization techniques to learn causal structure.

3. Functional form: Describes the assumed relationship between variables.
   - Linear: Assumes relationships are strictly linear.
   - Nonlinear: Assumes relationships are nonlinear.
   - Flexible: Accommodates both linear and nonlinear patterns.

4. Noise: Specifies the noise assumptions.
   - Gaussian: Assumes noise follows a Gaussian distribution.
   - NonGaussian: Assumes noise deviates from a Gaussian distribution.
   - Flexible: Accommodates both Gaussian and NonGaussian noise.

5. Latent Variable Tolerance: Indicates capability in handling unobserved confounders.
   - Robust: Highly tolerant to latent confounders.
   - Moderate: Acceptable tolerance toward latent variables.

6. Distribution Shift: Denotes assumptions about data distribution.
   - Heterogenous: Designed for datasets including varied or shifting distributions and indicators (domain index) of distribution shifts.
   - Homogenous: Assumes a consistent data distribution.

7. Scalability: Reflects the method's maximum capacity for handling dataset sizes (number of variables and samples). Note that some algorithms have different implementations (CPU & GPU), which may result in a range of scalability capabilities.
   - Large-scale: Able to handle very large datasets (e.g., 1000 variables and 10000 samples).
   - Medium-to-large-scale: Able to handle medium-sized datasets (e.g., 100 variables and 10000 samples).
   - Medium-scale: Able to handle moderately sized datasets (e.g., 50 variables and 5000 samples).
   - Small-to-medium-scale: Able to handle small-to-medium-sized datasets (e.g., 25 variables and 5000 samples).
   - Small-scale: Only able to handle smaller datasets (e.g., 15 variables and 2500 samples).

8. Efficiency: Highlights computational speed and hardware utilization. Note that some algorithms have different implementations (CPU & GPU), which may result in a range of efficiency capabilities.
   - Extreme Fast (GPU): Optimized for GPU acceleration to have extreme fast speed.
   - Fast (GPU): Optimized for GPU acceleration to have fast speed.
   - Fast (CPU): Optimized with improvements on algorithm logic and parallelization to have fast speed.
   - Moderate: Reasonable speed with typical resources.
   - Slow: Computation-intensive with slower execution.
   - Extreme Slow: Significantly slow due to complex computations.

9. Empirical Performance: Summarizes reliability and robustness based on experiments.
   - Robust: Consistently strong performance (Level 4-5 in benchmarks).
   - Moderate: Generally reliable with some variability (Level 2-3 in benchmarks).
   - Limited: Weaker performance with significant variability (Level 1 in benchmarks).

10. Output Format: Specifies the graph structure produced.
    - DAG: Directed Acyclic Graph with full directional information.
    - CPDAG: Completed Partially Directed Acyclic Graph.
    - PAG: Partial Ancestral Graph accommodating latent confounding.

11. Data Type: Specifies the type of data the algorithm is designed to handle.
    - Tabular: Designed for cross-sectional data without temporal dependencies.
    - Time-series: Designed for sequential data with temporal dependencies.
    - Both: Can handle both tabular and time-series data.

Below is the listing of causal discovery algorithms annotated with each tag type:

--- Constraint-based Methods -----------------------------------------------------------

PC: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: from Medium-to-large-scale to Large-scale,
    Efficiency: from Fast (CPU) to Extreme Fast (GPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG,
    Data Type: Tabular
}

FCI: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible, 
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG,
    Data Type: Tabular
}

CDNOD: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Heterogenous,
    Scalability: from Medium-to-large-scale to Large-scale,
    Efficiency: from Fast (CPU) to Extreme Fast (GPU),
    Empirical Performance: Moderate (Especially good at heterogenous data),
    Output Format: CPDAG,
    Data Type: Tabular
}

PCMCI: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: DAG,
    Data Type: Time-series
}

--- MB-based Methods --------------------------------------------------------------

InterIAMB: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG,
    Data Type: Tabular
}

BAMB: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Limited,
    Output Format: CPDAG,
    Data Type: Tabular
}

HITONMB: {
    Availability: Unavailable,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Limited,
    Output Format: CPDAG,
    Data Type: Tabular
}

IAMBnPC: {
    Availability: Available,
    Method Type: Hybrid,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG,
    Data Type: Tabular
}

MBOR: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Moderate,
    Output Format: CPDAG,
    Data Type: Tabular
}

--- Score-based Methods --------------------------------------------------------------

GES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Slow,
    Empirical Performance: Limited,
    Output Format: CPDAG,
    Data Type: Tabular
}

FGES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Linear,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG,
    Data Type: Tabular
}

XGES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Linear,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG,
    Data Type: Tabular
}

GRaSP: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Robust,
    Output Format: CPDAG,
    Data Type: Tabular
}

--- Continuous-optimization Methods -------------------------------------------------

GOLEM: {
    Availability: Available,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: DAG,
    Data Type: Tabular
}

CALM: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Extreme Slow,
    Empirical Performance: Moderate,
    Output Format: DAG,
    Data Type: Tabular
}

CORL: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Extreme Slow,
    Empirical Performance: Moderate,
    Output Format: DAG,
    Data Type: Tabular
}

NOTEARSLinear: {
    Availability: Available,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Robust,
    Output Format: DAG,
    Data Type: Tabular
}

NOTEARSNonlinear: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Nonlinear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Slow,
    Empirical Performance: Moderate,
    Output Format: DAG,
    Data Type: Tabular
}

DYNOTEARS: {
    Availability: Available,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Moderate,
    Output Format: DAG,
    Data Type: Time-series
}


--- Functional Model-based Methods (LiNGAM Family) ----------------------------------

DirectLiNGAM: {
    Availability: Available,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: from Fast (CPU) to Fast (GPU),
    Empirical Performance: Robust(Only good at nongaussian noise data, limited in Gaussian noise data),
    Output Format: DAG,
    Data Type: Tabular
}

ICALiNGAM: {
    Availability: Unavailable,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Slow,
    Empirical Performance: Limited,
    Output Format: DAG,
    Data Type: Tabular
}

VARLiNGAM: {
    Availability: Available,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: from Medium-scale to Large-scale,
    Efficiency: from Fast (CPU) to Fast (GPU),
    Empirical Performance: Robust (Good at both noise gaussian and nongaussian noise data),
    Output Format: DAG,
    Data Type: Time-series
}

--- Hybrid Methods -----------------------------------------------------------------

Hybrid: {
    Availability: Unavailable,
    Method Type: Hybrid,
    Functional form: Flexible,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Slow,
    Empirical Performance: Moderate,
    Output Format: DAG,
    Data Type: Tabular
}