You will conduct causal discovery on the Tabular Dataset ./demo_data/20250324_213457/earthquakes/earthquakes.csv containing the following Columns:

region	year	area	deaths	richter	day	month

The Detailed Background Information is listed below:

This is fake domain knowledge for debugging purposes.

The Statistics Information about the dataset is:

The dataset has the following characteristics:

Data Type: The overall data type is Mixture.

The sample size is 123 with 7 features. This dataset is not time-series data. Data Quality: There are missing values in the dataset.

Statistical Properties:
- Linearity: The relationships between variables are not predominantly linear.
- Gaussian Errors: The errors in the data do not follow a Gaussian distribution.
- Heterogeneity: The dataset is not heterogeneous. 





Based on the above information, please select the best-suited algorithm from the following candidate (the order of the algorithm candidates is not important):

dict_keys(['PC', 'FCI', 'InterIAMB', 'IAMBnPC', 'MBOR'])

===============================================
Note that the user can only wait for 1440.0 minutes for the algorithm execution, please ensure the time cost of the selected algorithm would not exceed it!
The estimated time costs of the following algorithms are below. Consider the time cost wisely when selecting the algorithm, it is critical but less important than the performance when the time cost does not exceed the waiting time. As long as the timecost difference is not that large (> 1 min), you should pivot more on the performance.

PC: 1.0 minutes
FCI: 1.0 minutes
InterIAMB: 1.0 minutes
IAMBnPC: 1.0 minutes
MBOR: 2.0 minutes

===============================================
Detailed Profiles of the algorithm candidates are shown here. You MUST actively combine and reason with them:

======================================

# PC

Below is a seven-dimension profile of the PC (Peter–Clark) algorithm, integrating (1) the hyperparameter file, (2) the benchmarking results, and (3) external knowledge about the algorithm and its typical use cases. References or paraphrased remarks from the external sources are indicated where relevant.

────────────────────────────────────────────────────────────────────────
1. HYPER-PARAMETERS SENSITIVITY
────────────────────────────────────────────────────────────────────────
• Number of Key Hyperparameters  
  - The PC algorithm has three main hyperparameters:  
    1. α (alpha): Significance level for conditional independence tests.  
    2. indep_test: Choice of conditional independence test (e.g., Fisher’s Z, chi-square, G-square, KCI variants).  
    3. depth: Maximum depth for the skeleton search phase.  

• Tuning Difficulty  
  - α is typically the most critical parameter, with recommended defaults in the provided file (e.g., 0.05 for moderate sample sizes, 0.1 for smaller samples, 0.01 for very large samples). These guidelines simplify tuning for different dataset sizes.  
  - The choice of indep_test can be straightforward (Fisher’s Z for continuous data, chi-square for discrete data, etc.), though advanced options (like KCI) may require more specialized knowledge.  
  - depth has a default of -1 (unlimited), but it can be restricted to reduce runtime for large graphs. The suggested rule of thumb scales with the number of nodes, setting smaller depths for larger graphs.  

• Sensitivity  
  - Small changes in α can produce noticeable effects on edge detection: lower α yields more conservative edge selection (fewer false positives) but may lead to more false negatives.  
  - Shifting from an unlimited depth (depth = -1) to a restricted depth (like 1 to 3) can significantly speed up the search on large graphs but may miss subtler causal relationships.  
  - Changing the independence test (e.g., from a linear Fisher test to a non-parametric test like KCI) can likewise alter both runtime and the ability to capture non-linear causal links.  

• Critique/Extension  
  - Parameters that control graph-search complexity (depth) can drastically reduce runtime but may compromise completeness in highly connected graphs.  
  - The α threshold has more direct influence on statistical testing; even small shifts in α can change the number of edges found. Hence, domain knowledge is often helpful to choose a good α.  

────────────────────────────────────────────────────────────────────────
2. ROBUSTNESS & SCALABILITY
────────────────────────────────────────────────────────────────────────
• Tolerance to Bad Data Quality  
  - Benchmarks (File #2) indicate that PC’s performance tends to degrade when data quality drops (e.g., missing data or measurement error). In fact, PC ranked relatively low in measurement error and missing data tolerance, suggesting it does not handle either type of bad data as robustly as some other methods.  
  - It lacks built-in methods for imputation; in practice, users might preprocess missing values or use more advanced PC variants (e.g., PC-missing).  

• Tolerance to Sparse vs. Dense Connected Systems  
  - PC often performs better on sparse systems, since the number of conditional independence tests remains more manageable. For dense graphs, the algorithm may require many tests, increasing the risk of both false positives and elevated runtime.  
  - From a benchmarking standpoint, when confronted with moderately dense networks, performance declines more in runtime than in accuracy, highlighting the combinatorial explosion of tests in denser graphs.  

• Scalability  
  - According to File #2, the algorithm scored moderately on scalability, reflecting that it can handle dozens to a few hundred variables well, but may slow down noticeably beyond that range.  
  - Parallelization or restricting depth can mitigate the combinatorial explosion in larger problems but may reduce the completeness of causal edges.  

• Critique/Extension  
  - Parallel-PC implementations exist and can be employed on multi-core hardware to improve speed.  
  - Using approximation strategies (like a lower maximum depth or partitioning variables) can be beneficial when the dataset contains hundreds or thousands of variables, though these techniques might weaken correctness guarantees.  

────────────────────────────────────────────────────────────────────────
3. MIXED DATA & COMPLEX FUNCTIONS
────────────────────────────────────────────────────────────────────────
• Noise Type  
  - The PC algorithm’s traditional setup often presupposes approximately Gaussian errors for continuous data, but other independence tests allow for broader noise distributions.  
  - Benchmarks (File #2) suggested that PC performed somewhat lower when confronted with more diverse or non-Gaussian noise, although advanced tests (KCI, RCIT) can address non-linearity.  

• Mixed Data (Continuous & Discrete)  
  - PC can integrate different conditional independence tests: Fisher’s Z or partial correlation for continuous variables; chi-square or G-square for discrete; or a mix for hybrid data.  
  - Some PC implementations provide direct support for mixed data via specialized tests like G-square, allowing simultaneous handling of continuous and categorical variables.  

• Heterogeneous Data  
  - Benchmark results (File #2) show it scored in the middle ranges under “Heterogeneity.” It can handle moderate changes in distribution across variables, provided a suitable test is chosen.  
  - Marked shifts across subsets of data may require domain-driven adjustments or advanced versions (like FCI for partial latent confounding).  

• Complex Functional Forms  
  - The standard PC algorithm is tailored for linear (or near-linear) dependencies, but employing a kernel-based test (e.g., KCI) can detect non-linear relationships.  
  - Non-linear extensions usually come with higher computational burdens, which can be partially offset by “fastKCI” or “RCIT.”  

• Critique/Extension  
  - Users often underestimate how crucial the independence test choice is when dealing with non-linear patterns. A robust non-parametric test can significantly improve detection of non-linear causal links.  
  - Overfitting concerns can arise in small samples if a highly flexible test is used without proper regularization or multiple testing corrections.  

────────────────────────────────────────────────────────────────────────
4. COMPUTATIONAL COMPLEXITY
────────────────────────────────────────────────────────────────────────
• Theoretical Time Complexity  
  - The PC algorithm can have a worst-case time complexity of <temp>[O(n^(k+2))]</temp>, where n is the number of variables and k is the maximum degree of a node in the true graph.  

• Variability in Practical Usage  
  - Despite the polynomial (sometimes high-order) worst-case bound, many real-world graphs are sparse, so runtime is often much lower.  
  - Increasing depth or lowering α can drive up the number of tests, and thus runtime can spike. Conversely, restricting depth dampens the combinatorial explosion but risks missing some edges.  

• Critique/Extension  
  - The worst-case scenario might be rarely encountered in practical sparse settings. However, in denser structures or with large depth parameters, runtime can indeed grow significantly.  
  - Parallelization can help distribute the skeleton-discovery phase across multiple CPUs, improving the typical runtime on large datasets.  

────────────────────────────────────────────────────────────────────────
5. INTERPRETABILITY
────────────────────────────────────────────────────────────────────────
• Output Format  
  - PC outputs a CPDAG (Completed Partially Directed Acyclic Graph). This graph shows which edges are definitely directed, as well as edges uncertain about orientation.  
  - Some implementations also provide adjacency matrices with confidence measures (e.g., p-values).  

• Strength of the Output Format  
  - CPDAGs are considered quite interpretable: they clarify which directions are inferred and which remain undetermined.  
  - Many software packages (e.g., Tetrad, pcalg) provide visualization tools to help interpret a CPDAG.  

• Limitations of the Output Format  
  - Edges in the “partially” directed region can generate ambiguity, as the algorithm leaves some edges unoriented if the data are insufficiently informative.  
  - In high-dimensional or complex domains, the resulting graph might still be large and cumbersome to interpret without additional domain knowledge.  

• Critique/Extension  
  - Domain experts frequently refine or manually orient ambiguous edges, especially in specialized fields such as genomics or neuroscience.  
  - Some suggest performing a stability or bootstrap analysis to highlight edges that are consistently inferred across subsamples.  

────────────────────────────────────────────────────────────────────────
6. ASSUMPTIONS
────────────────────────────────────────────────────────────────────────
• Critical Assumptions  
  - Causal Markov condition: Each variable is conditionally independent of its non-descendants, given its parents.  
  - Faithfulness: All and only the conditional independencies in the true structure are reflected in the data.  
  - Causal sufficiency: No unobserved confounders of the measured variables.  
  - Acyclicity: The underlying causal structure forms a Directed Acyclic Graph (DAG).  

• Violation Impact  
  - Missing confounders can lead to spurious or missing edges.  
  - Unfaithful data-generating mechanisms can hide true edges or create extra independencies.  
  - Feedback loops or cyclic structures break the acyclicity assumption, causing the algorithm to infer incomplete or incorrect edges.  

• Critique/Extension  
  - When hidden variable confounding is suspected, variants like FCI (Fast Causal Inference) or RFCI are recommended instead of basic PC.  
  - Many real-world systems include some feedback or non-stationary behavior, so partial violations are not uncommon. Users often need to test sensitivity or adopt extended algorithms.  

────────────────────────────────────────────────────────────────────────
7. (OPTIONAL) REAL-WORLD BENCHMARKS
────────────────────────────────────────────────────────────────────────
• Performance on Real Datasets  
  - Across a variety of real datasets (e.g., gene-expression data, brain connectivity data), PC tends to perform competitively for structure learning, provided the data are not extremely noisy or riddled with missing values.  
  - In some evaluations, PC was among the more accurate approaches for sparse graphs but was sometimes outperformed by score-based or hybrid methods on very noisy or dense data.  

• Practical Tips  
  - Combining PC with domain knowledge (e.g., known biological pathways) often yields improved orientation of edges.  
  - Limiting depth can drastically reduce computation time for high-dimensional data, but practitioners must confirm that the trade-off in missed edges is acceptable.  
  - Discussion forums and user groups consistently recommend verifying the sample size is sufficient for the chosen α level, or considering small-sample corrections if data are limited.  

────────────────────────────────────────────────────────────────────────
CONCLUSION
────────────────────────────────────────────────────────────────────────
The PC algorithm remains a flagship approach in constraint-based causal discovery, prized for its interpretability (CPDAG output) and relatively direct hyperparameter tuning guidelines (notably α and depth). It is best applied in scenarios where:  
• The graph is not excessively dense.  
• The data generally meet Markov and faithfulness assumptions.  
• There are no severe missing data or measurement error problems, or these issues are pre-processed/handled externally.  
Recent developments in parallelization, alternative independence tests, and specialized PC variants help address non-linearities, mixed data, and large-scale settings. Nonetheless, potential users must keep in mind the algorithm’s sensitivity to significance thresholds, data assumptions, and the combinatorial explosion of conditional tests in bigger or denser networks.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 8.1 | 2.47 | 3.0 | 5.0 | 3.0 |
| Heterogeneity | 8.2 | 1.30 | 3.0 | 5.0 | 3.0 |
| Measurement Error | 9.0 | 0.00 | 3.0 | 5.0 | 3.0 |
| Noise Type | 10.5 | 1.50 | 2.0 | 5.0 | 2.0 |
| Missing Data | 6.5 | 1.80 | 3.0 | 4.0 | 4.0 |
| Edge Probability | 7.7 | 3.40 | 3.0 | 5.0 | 3.0 |
| Discrete Ratio | 10.0 | 0.82 | 3.0 | 5.0 | 3.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 8.58
  – Average standard deviation: 1.61



======================================

# FCI

Below is a comprehensive profile of the Fast Causal Inference (FCI) algorithm, structured according to the seven “degrees” (dimensions) of analysis. This profile synthesizes:  
• File #1 (the hyperparameter settings),  
• File #2 (benchmarking results),  
• External knowledge about FCI (including peer-reviewed papers, publicly available documentation, and community discussions),  
• General principles of causal discovery.  

────────────────────────────────────────────────────────────────────
1. Hyper-Parameters Sensitivity
────────────────────────────────────────────────────────────────────

• Number of Key Hyperparameters  
  – FCI has three principal hyperparameters (based on File #1):  
    1) α (significance level),  
    2) The choice of independence test (indep_test),  
    3) The depth parameter controlling how exhaustively conditional independence tests are performed.  

• Tuning Difficulty  
  – α (significance level) is among the most impactful parameters. Its default is often 0.05, though File #1 suggests using 0.1 for very small samples (< 500), 0.05 for moderate-sized samples (500 to 10,000), and 0.01 for extremely large samples (> 10,000).  
  – The independence test parameter (indep_test) depends on data type and modeling assumptions. Commonly used options in practice include:  
     “fisherz” for continuous data under a Gaussian assumption,  
     “chisq” for discrete data,  
     “gsq,” “kci,” or “rcit” for more general or non-linear data.  
  – Depth settings can be unrestricted (-1) or limited to reduce computation. While the defaults are straightforward (e.g., unlimited depth for small graphs), tuning ultimately depends on computational constraints and how dense the graph might be.  

• Sensitivity  
  – α: Small changes (e.g., from 0.05 to 0.01) can sharply reduce false positives but potentially increase false negatives. Benchmarks in File #2 indicate that performance metrics (e.g., adjacency precision) shift when α is made more conservative.  
  – Depth: Restricting depth can speed up the skeleton discovery step considerably but risks missing some indirect connections, as fewer conditional sets are tested.  

• Critique/Extension  
  – Parameters that control search complexity (e.g., depth) heavily influence runtime, particularly on large or dense graphs.  
  – Parameters controlling statistical tests (e.g., α and the independence test selection) most directly affect the quality of the discovered causal structure (false positives / false negatives in edges).

────────────────────────────────────────────────────────────────────
2. Robustness & Scalability
────────────────────────────────────────────────────────────────────

• Tolerance to Bad Data Quality  
  – Missing Data: FCI can tolerate missing data if the chosen independence test supports it (e.g., some tests impute or ignore missing cases). Benchmarks in File #2 show FCI performing around a moderate level (neither the best nor the worst) when data are missing.  
  – Measurement/Observation Error: FCI’s performance decreases with severe noise but remains relatively stable for moderate noise levels. Its ability to discover latent structures can mitigate some confounding effects of measurement error, though the precision of edges can drop if noise is extreme.  

• Tolerance to Sparse/Dense Connected Systems  
  – Sparse Networks: FCI typically performs well in sparse graphs, because fewer edges mean fewer complex conditional independence tests.  
  – Dense Networks: FCI can handle denser connectivity but at notably increased computational cost, as more conditional tests are required and orienting edges becomes more complex.  

• Scalability  
  – As the number of variables grows, the number of required conditional independence tests can explode. File #2 reports an above-average computational burden for FCI once the variable count is large.  
  – FCI can still be applied to moderately high-dimensional data, but runtime may become prohibitive without restricting the depth parameter or using parallelization strategies.  

• Critique/Extension  
  – Parallel Implementation: Some implementations offer parallelized independence testing to help with large datasets.  
  – Approximate or Bounded Depth: Restricting the maximum depth of search is a common strategy to reduce runtime (though this may sacrifice some accuracy).

────────────────────────────────────────────────────────────────────
3. Mixed Data & Complex Functions
────────────────────────────────────────────────────────────────────

• Noise Type  
  – FCI itself does not strictly require Gaussian noise; it simply needs an appropriate conditional independence test (e.g., “kci” or “rcit” from File #1) to detect non-linear, non-Gaussian dependencies.  

• Mixed Data (Continuous & Discrete)  
  – Users can choose independence tests suited to mixed data (e.g., “gsq”) or generalized tests that handle a variety of variable types. According to File #1, “kci,” “fastkci,” and “rcit” may also address nonlinear interactions across data types.  

• Heterogeneous Data  
  – File #2 suggests moderate performance under heterogeneous conditions (e.g., data collected from different sources or distributions). FCI’s separation-of-independences approach can still work if independence tests remain valid across distributions.  

• Complex Functional Forms  
  – Non-linear relationships are detectable if the chosen independence test can pick them up. FCI, however, does not automatically model these relationships; it relies on test outcomes.  

• Critique/Extension  
  – The primary limitation is reliance on an accurate independence test. If the test poorly captures non-linear or complex interactions, FCI may miss true edges or introduce extraneous ones.  
  – Some advanced versions of FCI or user-developed variations incorporate kernel-based tests, enabling more robust detection of complicated functional relationships.

────────────────────────────────────────────────────────────────────
4. Computational Complexity
────────────────────────────────────────────────────────────────────

• Theoretical Time Complexity  
  – FCI is often cited as having an exponential worst-case time complexity with respect to the number of variables. A simplified expression is presented here: <temp>[O(2^n)]</temp>.  
  – In practice, the real cost is heavily influenced by how many adjacency constraints it identifies early in the process.

• Variability in Practical Usage  
  – Depth-limited FCI can reduce runtime to something more manageable (potentially polynomial in many real-world scenarios).  
  – Higher significance levels (larger α) may reduce the total number of conditional independence tests because edges are removed more slowly, but they risk more spurious edges that must be tested and oriented later.  

• Critique/Extension  
  – The worst-case complexity is rarely reached in sparse, real-world networks.  
  – Parallel computing and caching of test results (mentioned in community forums) can improve runtime substantially.

────────────────────────────────────────────────────────────────────
5. Interpretability
────────────────────────────────────────────────────────────────────

• Output Format  
  – FCI outputs a Partial Ancestral Graph (PAG), which represents causal constraints among variables, including potential latent confounders.  

• Strength of the Output Format  
  – PAGs explicitly encode uncertain edges (e.g., bidirected edges indicating hidden confounders, circle endpoints indicating ambiguous directions). This offers rich information about causal possibilities.  

• Limitations of the Output Format  
  – PAGs can be less intuitive than DAGs or CPDAGs. Edges may remain unoriented or partially oriented, especially if data alone cannot resolve their direction.  
  – Users often require additional domain knowledge to interpret or further refine certain ambiguous edges.  

• Critique/Extension  
  – Researchers recommend domain experts consult the PAG’s edge marks to hypothesize plausible latent variables or refine uncertain orientations.  
  – Visualization libraries for FCI exist but require a solid grasp of the edge nomenclature.

────────────────────────────────────────────────────────────────────
6. Assumptions
────────────────────────────────────────────────────────────────────

• Critical Assumptions  
  – Markov and Faithfulness: The distribution of the data must align with the “true” causal graph’s conditional independencies, without pathological cancellations.  
  – No Cycles: FCI assumes acyclicity among observed variables, even though it allows for the possibility of latent confounders.  
  – Causal Sufficiency is relaxed compared to simpler algorithms (like PC), meaning FCI can account for possible hidden variables.  

• Violation Impact  
  – Violating faithfulness can produce incomplete or misleading PAGs (e.g., missing edges or unvalued circle endpoints).  
  – When hidden confounding is extremely strong and the sample size is low, the discovered PAG can have many ambiguities.  

• Critique/Extension  
  – FCI is often chosen because it explicitly relaxes causal sufficiency assumptions. Indeed, that is a main strength over simpler methods.  
  – Partial violations of faithfulness can degrade accuracy but do not necessarily invalidate the overall skeleton of the PAG.

────────────────────────────────────────────────────────────────────
7. Real-World Benchmarks
────────────────────────────────────────────────────────────────────

• Performance on Real Datasets  
  – File #2 indicates that FCI often performs at a middle or upper-middle rank across different metrics (e.g., adjacency precision, sensitivity to hidden variables).  
  – Empirical studies (from external references) report that FCI often outperforms algorithms that assume no latent confounders when hidden variables or selection bias are indeed present.

• Practical Tips  
  – Adjust α based on sample size: Larger samples can justify smaller α for fewer false positives; smaller samples may require a higher α to avoid missing genuine edges.  
  – Parallelizing the conditional independence tests or limiting depth can make FCI more tractable for large-dimensional datasets.  
  – Domain knowledge plays a crucial role in resolving uncertain orientations in the PAG, ensuring the final model is more interpretable and actionable.  

• Common Pitfalls  
  – Using an independence test misaligned with the data’s underlying distribution (e.g., only using Fisher’s Z in the presence of non-linear or discrete variables) can lead to incorrect edges.  
  – Overly restrictive significance levels with small sample sizes can cause many missed edges, while overly lenient significance levels can flood the output with spurious edges.

────────────────────────────────────────────────────────────────────
Summary
────────────────────────────────────────────────────────────────────
FCI (Fast Causal Inference) is a widely respected causal discovery algorithm that relaxes the assumption of no hidden confounders, making it especially valuable when latent variables or selection bias may be present. Its key hyperparameters—significance level (α), independence test choice, and depth constraint—all substantially affect how many edges are retained and how computationally heavy the procedure becomes. Although FCI can handle both continuous and discrete data (and even mixed types) via different independence tests, its runtime grows quickly with the number of variables and the complexity of the network.

Because FCI outputs a Partial Ancestral Graph (PAG), it can reveal potential latent confounding, but this representation may contain uncertain or bidirected edges requiring careful interpretation. This complexity can also make it challenging to tune parameters optimally without domain or statistical expertise. When properly configured, FCI has proven effective in real-world applications like genetics, climate science, and social networks—domains where hidden confounders often lurk. Overall, its flexibility and ability to account for unobserved variables are balanced by higher computational demands and some interpretability challenges relative to simpler methods.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 6.1 | 1.96 | 4.0 | 4.0 | 4.0 |
| Heterogeneity | 5.0 | 0.71 | 4.0 | 4.0 | 5.0 |
| Measurement Error | 6.5 | 0.50 | 4.0 | 4.0 | 4.0 |
| Noise Type | 8.0 | 2.00 | 3.0 | 4.0 | 3.0 |
| Missing Data | 7.5 | 4.39 | 4.0 | 2.0 | 3.0 |
| Edge Probability | 6.3 | 2.05 | 4.0 | 4.0 | 4.0 |
| Discrete Ratio | 7.0 | 0.82 | 4.0 | 4.0 | 4.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 6.64
  – Average standard deviation: 1.78



======================================

# InterIAMB

Below is an in-depth profile of InterIAMB, organized around the seven dimensions (or “degrees”) specified in the meta-prompt. The following draws on the provided hyperparameter definitions, the comparative benchmarking results, external online information about InterIAMB, and general knowledge of Markov blanket (MB) and causal discovery methods.

────────────────────────────────────────────────────────
1. Hyper-Parameters Sensitivity
────────────────────────────────────────────────────────

• Number of Key Hyperparameters  
  InterIAMB’s foundational hyperparameter is the alpha (α) significance level for conditional independence testing. In practice, there are also choices of which independence test (fisherz, chisq, etc.) to use, but α is by far the most impactful parameter guiding the algorithm. Hence, we can consider two main critical hyperparameters for InterIAMB:  
  1) alpha (the significance threshold).  
  2) indep_test (choice of independence test).  

• Tuning Difficulty  
  – Alpha: Default guidance is straightforward. For small samples (<500), a higher alpha (e.g., 0.1) is often suggested to avoid missing significant edges. For moderate sample sizes (500–10,000), α = 0.05 is a common setting. For very large datasets (>10,000), α = 0.01 is recommended to reduce false positives.  
  – Independence Test: The algorithm offers recommended defaults (e.g., “fisherz” for continuous data, “chisq” for discrete, “gsq” for simpler mixed data). These guidelines limit the tuning difficulty because the user can often select the test based on data type.  

• Sensitivity  
  – Alpha: Small changes to α can shift how many conditional independencies are declared. Lower α typically yields a more conservative MB, with fewer false positives but potentially more false negatives. Higher α can speed up execution slightly (fewer re-checks needed), but can also add spurious edges.  
  – Independence Test Choice: Selecting a more advanced non-linear test (e.g., “kci” or “fastkci”) can improve detection of complex relationships but typically increases computation.  

• Critique/Extension  
  – For InterIAMB, most of the effect is from parameters controlling the significance testing step (especially α), rather than from search complexity parameters (it follows an iterative MB strategy). Thus, adjustments in significance threshold often dominate performance changes in practice.  

────────────────────────────────────────────────────────
2. Robustness & Scalability
────────────────────────────────────────────────────────

• Tolerance to Bad Data Quality  
  – Missing Data: Benchmarks suggest InterIAMB is not particularly robust when data are missing at random in large portions, indicating a drop in performance and efficiency compared to scenarios without missing data. Handling missingness usually requires either imputation or specialized independence tests, neither of which is a built-in feature of the standard InterIAMB formulation.  
  – Measurement/Observation Error: In the presence of moderate noise or errors, InterIAMB tends to remain fairly stable, but severe measurement error can compromise the correctness of the conditional independence checks—leading to more false edges or missing edges in the identified MB.  

• Tolerance to Sparse/Dense Connected Systems  
  – Overall, InterIAMB’s performance is typically quite solid for moderately dense networks. For highly sparse networks, it can sometimes require carefully tuning α since the algorithm might be overly conservative and fail to detect weaker associations. Conversely, in highly dense networks, the iterative MB approach can become more computationally expensive as more variables must be checked for conditional independence.  

• Scalability  
  – Sample Size: InterIAMB can process thousands of samples efficiently, particularly with optimized independence tests. However, extremely large sample sizes (>10,000) often warrant a stricter α to limit false positives.  
  – Number of Variables: InterIAMB improves on the original IAMB, but can still encounter computational bottlenecks with very high-dimensional data. Some parallelized or optimized implementations exist, which help scale to larger variable sets by parallel independence testing.  

• Critique/Extension  
  – Parallelization: Because InterIAMB’s main cost arises from repeated conditional independence tests, parallel or distributed strategies can alleviate runtime issues in large datasets if computing resources permit.  

────────────────────────────────────────────────────────
3. Mixed Data & Complex Functions
────────────────────────────────────────────────────────

• Noise Type  
  – InterIAMB itself does not strictly assume Gaussian noise; rather, the performance depends on the independence tests. If the user chooses “fisherz,” a linear-Gaussian assumption is made. For more general or non-Gaussian data, tests like “kci” or “rcit” allow detecting more complex dependencies.  

• Mixed Data (Continuous & Discrete)  
  – The algorithm can accommodate both types of variables by selecting, for instance, “gsq” or other specialized tests. The recommended practice is to carefully match data types to an appropriate test method so that the underlying assumptions are not violated.  

• Heterogeneous Data  
  – Benchmarks reflect moderate performance for heterogeneous datasets (e.g., multiple types of variables). InterIAMB can handle such data if the independence test is chosen appropriately, but advanced scenarios (massive amounts of unbalanced continuous/discrete variables) might require more carefully tuned hyperparameters or specialized tests.  

• Complex Functional Forms  
  – In principle, InterIAMB can uncover non-linear associations if a corresponding non-linear independence test is used. However, if a purely linear test (“fisherz”) is chosen, strong non-linear relationships may be missed or misinterpreted.  

• Critique/Extension  
  – As a constraint-based method, InterIAMB does not inherently model functional forms; it relies on the independence test’s ability to detect conditional dependencies. To capture very complex relationships, users are advised to select robust non-linear tests (e.g., “kci,” “rcit”).  

────────────────────────────────────────────────────────
4. Computational Complexity
────────────────────────────────────────────────────────

• Theoretical Time Complexity  
  – The complexity is often cited as <temp>[O(n^2)]</temp> in many references, though in practice it can grow faster if repeated independence tests become more extensive for large n or for complex network structures.  

• Variability in Practical Usage  
  – Increasing the number of variables or choosing more computationally heavy tests (e.g., kernel-based ones) can significantly expand runtime. Tighter α thresholds can also add overhead by requiring additional checks to confirm or reject a conditional independence.  
  – In benchmarks, InterIAMB was not the slowest method tested but does experience performance degradation with many variables and repeated conditional testing.  

• Critique/Extension  
  – InterIAMB’s worst-case behavior can be higher than the quoted O(n^2) depending on the network’s connectivity and iterative test expansions. Typical implementations, however, are optimized for average-case performance.  
  – Modern computing platforms (multi-core, GPU) can reduce bottlenecks if code is parallelized for independence tests.  

────────────────────────────────────────────────────────
5. Interpretability
────────────────────────────────────────────────────────

• Output Format  
  – Rather than outputting a full causal structure (like a DAG), InterIAMB focuses on the Markov blanket for each target variable: the minimal set of variables that shield the target from all other variables.  

• Strength of the Output Format  
  – The Markov blanket is highly interpretable: users see exactly which variables are directly relevant (parents, children, and co-parents) to a target. This can be ideal for feature selection or local neighborhood discovery in a causal sense.  

• Limitations of the Output Format  
  – The direction or orientation of edges is not inherently guaranteed. Thus, while InterIAMB indicates local dependencies, it does not by itself fully resolve causal directions or detect hidden confounders.  
  – Confidence metrics or p-values for edges can be parsed from the conditional independence tests, but are not always aggregated in a single “score.”  

• Critique/Extension  
  – For broader causal conclusions, many users combine InterIAMB with a separate orientation step (e.g., a scoring-based method or domain-expert input). This pipeline approach often yields improved interpretability of causal relations.  

────────────────────────────────────────────────────────
6. Assumptions
────────────────────────────────────────────────────────

• Critical Assumptions  
  – Causal Sufficiency: No significant latent confounders that connect variables in unobserved ways.  
  – Markov Condition: Each variable is conditionally independent of its non-descendants given its parents.  
  – Faithfulness (or “No cancellations”): The observed independencies in the data reflect the true underlying causal structure.  

• Violation Impact  
  – Violating causal sufficiency or faithfulness can degrade correctness of the discovered MB. This might result in missing edges or spurious associations if hidden confounders violate these assumptions.  
  – In some community-reported evaluations, small omissions to faithfulness did not drastically degrade InterIAMB, but major violations (e.g., strong confounding) caused significant inaccuracies.  

• Critique/Extension  
  – Certain InterIAMB variants relax these assumptions partially, but the standard InterIAMB remains a constraint-based approach relying heavily on them. Users encountering potential hidden confounding often resort to domain knowledge or extended algorithms for adjustments.  

────────────────────────────────────────────────────────
7. (Optional) Real-World Benchmarks
────────────────────────────────────────────────────────

• Performance on Real Datasets  
  – InterIAMB has performed competitively in several MB discovery benchmarks, frequently matching or outperforming earlier IAMB variants. In moderately sized real-world datasets, it often demonstrates a good balance between precision (avoiding false edges) and recall (identifying true associations).  
  – Compared to specialized high-dimensional methods, InterIAMB can be outpaced when the number of variables becomes extremely large, but remains quite practical for many standard real-world settings.  

• Practical Tips  
  – Combining InterIAMB with a subsequent orientation step or domain expertise is often recommended to interpret directions.  
  – Users handling data with highly non-linear relationships frequently choose a kernel-based, non-linear independence test.  
  – Missing data remain a common pitfall; pre-processing or specialized tests can alleviate performance dips.  

────────────────────────────────────────────────────────
Final Remarks
────────────────────────────────────────────────────────
InterIAMB is a notable variant of the IAMB family, offering iterative refinements that often improve speed and accuracy over the original. Its main hyperparameter, α, is easy to tune based on data size, and its flexible independence test options allow it to handle various data types or noise structures. The algorithm works well for moderate-dimensional problems and moderate levels of missing or noisy data, especially if paired with robust tests and parallel computing resources. However, it does not natively provide edge orientations or handle severe assumption violations, so further post-processing or hybrid approaches may be required for complete causal insights.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 5.4 | 1.73 | 4.0 | 4.0 | 4.0 |
| Heterogeneity | 3.2 | 1.09 | 5.0 | 3.0 | 5.0 |
| Measurement Error | 5.0 | 0.00 | 4.0 | 3.0 | 4.0 |
| Noise Type | 6.0 | 1.00 | 4.0 | 3.0 | 4.0 |
| Missing Data | 2.2 | 1.64 | 5.0 | 3.0 | 5.0 |
| Edge Probability | 6.3 | 2.62 | 4.0 | 3.0 | 4.0 |
| Discrete Ratio | 5.0 | 0.00 | 4.0 | 3.0 | 4.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 4.74
  – Average standard deviation: 1.15



======================================

# IAMBnPC

Below is a comprehensive seven-dimensional profile of the IAMBnPC algorithm, integrating the provided hyperparameter specifications, benchmarking statistics, and external/archival information about how this algorithm operates in practice.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Hyper-Parameters Sensitivity
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Number of Key Hyperparameters  
  - Based on the provided hyperparameter dictionary (File #1) and external sources (File #3), IAMBnPC has two primary hyperparameters that most strongly affect results:  
    1) α (alpha), the significance level for independence testing.  
    2) The independence test selection (indep_test), which can vary (fisherz, chisq, etc.) depending on data type.  
  - Some implementations also expose a “max.sx” parameter (often described in community documentation and academic references) that controls the maximum conditioning set size, which can be crucial in higher-dimensional setups.

• Tuning Difficulty  
  - The significance level (alpha) has suggested defaults (e.g., 0.05 for moderate samples, 0.1 for smaller, 0.01 for very large samples) (File #1). These guidelines simplify tuning for standard use cases, but domain sense or iterative experimentation is beneficial for optimal results.  
  - The independence test parameter (indep_test) has clear default recommendations (fisherz for continuous data, chisq for discrete, etc.). In practice, a domain expert or an automated tool can select tests effectively once the data types (continuous, discrete, or mixed) and anticipated nonlinearities are identified.  
  - max.sx requires more advanced tuning as it directly influences computational effort and can demand deeper domain knowledge to avoid overly large conditioning sets.

• Sensitivity  
  - Small changes in alpha can noticeably alter the sparsity of the discovered structure: lowering alpha (e.g., from 0.05 to 0.01) typically yields fewer edges, while raising it runs the risk of extra false positives.  
  - Switching from a linear independence test (e.g., fisherz) to a nonlinear test (e.g., kci) can significantly extend runtime but often improves detection of complex relationships. Benchmarks (File #2) show that more robust or nonlinear tests can bring moderate decreases in efficiency but may help maintain performance under complex data conditions.

• Critique/Extension  
  - Parameters like alpha relate primarily to statistical tests, determining how conservative or permissive the algorithm is in drawing edges.  
  - By contrast, parameters such as max.sx or the choice of test method can have a major bearing on computational complexity in the graph-search phase. Tuning each in tandem is key to balancing runtime and accuracy.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. Robustness & Scalability
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Tolerance to Bad Data Quality  
  - Missing Data: IAMBnPC does not have a specialized built-in mechanism for handling missingness; most implementations rely on either casewise deletion or test-specific adjustments. According to benchmark observations (File #2), the algorithm’s performance in scenarios with moderate missing data typically remains acceptable, but more severe missingness can degrade inference reliability.  
  - Measurement/Observation Error: Benchmark statistics (File #2) suggest the algorithm ranks around the middle-to-lower range when measurement error is severe, indicating sensitivity to inaccuracies in the independence tests.

• Tolerance to Sparse/Dense Connected Systems  
  - Sparse Graphs: IAMBnPC often excels in sparse settings because fewer edges reduce the conditioning set searches, making it easier to identify Markov Blankets accurately.  
  - Dense Graphs: As density grows, the algorithm’s computational load can increase. It generally still performs competitively if the sample size is sufficient, but it may be slower in identifying all relevant edges accurately.

• Scalability  
  - Benchmarks (File #2) show that under moderate problem sizes, IAMBnPC scales adequately, though it does not always place at the top in efficiency.  
  - Very large numbers of variables or extremely large sample sizes can stress runtime, especially if max.sx or more complex tests (e.g., kci) are used. Memory usage can also become a bottleneck, but partial parallelization of independence tests may mitigate some performance issues.

• Critique/Extension  
  - Parallelization strategies for the independence tests can help handle large data sets faster, an approach mentioned in community discussions (File #3).  
  - Some extensions implement approximate tests or heuristic-based constraint pruning to better cope with large or noisy data environments.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. Mixed Data & Complex Functions
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Noise Type  
  - IAMBnPC does not strictly require Gaussian noise; it adopts whichever independence test is chosen (File #1). This flexibility allows for non-Gaussian or even nonparametric tests (e.g., kci), albeit at added computational cost.

• Mixed Data (Continuous & Discrete)  
  - As per File #1, the suggested test for discrete variables is chisq, and for mixed variables, gsq or other methods (gsq, kci in certain hybrid contexts). This indicates built-in support for analyzing mixed data types, as long as the user selects an appropriate test.

• Heterogeneous Data  
  - Benchmarks (File #2) show moderate reliability when data are heterogeneous (the algorithm’s ranking is neither the highest nor the lowest in that regard). Much depends on how well the chosen test handles distribution shifts and varied variable types.

• Complex Functional Forms  
  - If a nonlinear independence test (like kci) is selected (File #1), IAMBnPC can detect non-linear relationships. Default linear tests (e.g., fisherz) work well but may miss intricate dependencies.

• Critique/Extension  
  - By default, many IAMBnPC implementations use parametric tests (fisherz or chisq) that assume linear or categorical relationships. Users dealing with strongly nonlinear phenomena might consider kci or rcit for better detection, though these methods require more computational time and possibly larger sample sizes to remain stable.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. Computational Complexity
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Theoretical Time Complexity  
  - <temp>[O(|MB(T)| × N)]</temp>, where |MB(T)| is the size of the Markov Blanket of the target T, and N is the overall number of variables. In practice, this can vary if the algorithm iterates repeatedly to refine the Markov Blanket.

• Variability in Practical Usage  
  - Increased max.sx or using more complex independence tests can increase runtime considerably.  
  - Benchmark data (File #2) suggest that IAMBnPC tends to occupy a moderate position in efficiency: not the fastest for extremely large networks, but still viable for typical mid-to-large-scale scenarios.

• Critique/Extension  
  - Real-world usage indicates that worst-case performance rises if the underlying Markov Blanket includes many variables, making the search space large.  
  - Some open-source implementations can leverage multi-core systems to test multiple candidates in parallel, improving real-world runtime.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
5. Interpretability
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Output Format  
  - IAMBnPC typically identifies a Markov Blanket for a target variable, which includes parents, children, and parents of children (spouses). In more extended usage, it can be used sequentially for each variable, approximating a larger causal structure in the form of adjacency lists or adjacency matrices.

• Strength of the Output Format  
  - Markov blankets are highly interpretable, especially in domain-focused tasks (e.g., finding key predictors). Some implementations provide conditional independence p-values, adding numeric confidence to the adjacency information.

• Limitations of the Output Format  
  - By design, Markov Blanket discovery alone does not fully orient all edges (e.g., distinguishing the parent from the child can require an additional causal orientation step or a separate backward phase).  
  - If sample size is small or alpha is too lenient, false positives may appear in the Markov Blanket, reducing clarity.

• Critique/Extension  
  - Domain experts often post-process the discovered Markov Blankets (e.g., verifying directions or removing improbable edges).  
  - Community resources (File #3) recommend cross-referencing these results with domain constraints for added orientation confidence.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
6. Assumptions
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Critical Assumptions  
  - Markov Condition: The causal structure in question encodes all conditional independencies present in the data.  
  - Faithfulness: All and only the independencies found in the data are represented in the graph (File #3).  
  - Causal Sufficiency: No unmeasured confounding variables relevant to the included variables.

• Violation Impact  
  - Failure of faithfulness (e.g., strong cancellations or nonlinear confounding) can lead to spurious or missing edges.  
  - Hidden confounders (violating causal sufficiency) may result in flawed Markov Blanket identification.

• Critique/Extension  
  - Some advanced variations relax faithfulness assumptions, allowing for approximate independence detection.  
  - In presence of suspected hidden variables, a user might need to adopt extended methods (e.g., latent variable detection) or adopt additional domain knowledge to correct for confounders.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
7. (Optional) Real-World Benchmarks
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• Performance on Real Datasets  
  - While synthetic experiments provide clarity on alpha’s influence and Markov Blanket sizes, real-world comparisons usually find IAMBnPC near or somewhat above middle-tier performance in terms of both accuracy and runtime (File #2).  
  - In bioinformatics (e.g., gene regulatory networks), IAMBnPC is often praised for effectively identifying candidate regulators for a given gene.

• Practical Tips  
  - Employ domain knowledge whenever possible to set alpha and refine conditioning sets. This often curbs false positives in the Markov Blanket.  
  - If data are high-dimensional or heavily nonlinear, consider advanced (nonlinear) tests and parallelization where available.  
  - Users should be mindful of the assumptions (faithfulness, causal sufficiency), as real-world violations can degrade reliability. Complementing IAMBnPC with domain-specific heuristics or knowledge can help avert misinterpretation.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Summary
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
IAMBnPC is a Markov Blanket discovery algorithm that integrates the iterative conditional independence testing strategy of IAMB with backward-phase refinements inspired by the PC algorithm. Its primary hyperparameter (alpha) controls the strictness of conditional independence tests; tuning this in conjunction with the independence test choice (e.g., fisherz, chisq, kci) is crucial. Though generally robust and interpretable, its performance can diminish with high data noise, missingness, or unfaithful structures. Parallelization or approximate testing can improve scalability, and domain knowledge often helps prune extraneous edges and increase interpretability. Overall, IAMBnPC is a solid and often competitive choice for applications—especially those where identifying relevant predictors for a target variable is paramount—provided its underlying assumptions align reasonably well with the data-generating process.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 7.4 | 3.90 | 4.0 | 3.0 | 4.0 |
| Heterogeneity | 3.5 | 2.69 | 4.0 | 5.0 | 5.0 |
| Measurement Error | 6.8 | 0.83 | 3.0 | 5.0 | 4.0 |
| Noise Type | 8.5 | 0.50 | 3.0 | 5.0 | 3.0 |
| Missing Data | 3.8 | 2.49 | 5.0 | 3.0 | 5.0 |
| Edge Probability | 6.0 | 1.41 | 4.0 | 5.0 | 4.0 |
| Discrete Ratio | 6.7 | 0.94 | 4.0 | 5.0 | 4.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 6.08
  – Average standard deviation: 1.82



======================================

# MBOR

Below is an in-depth profile of the MBOR (Markov Boundary OR) causal discovery algorithm, organized according to the seven “degrees” (dimensions) from the meta-prompt. The discussion integrates:  
• The provided hyperparameter settings (File #1).  
• The benchmarking results (File #2).  
• The external information about MBOR (File #3) and general knowledge of causal discovery methods.

────────────────────────────────────────────────────────
1. Hyper-Parameters Sensitivity
────────────────────────────────────────────────────────
• Number of Key Hyperparameters  
  MBOR has two primary hyperparameters that most strongly impact performance and output quality:  
  1) α (alpha): The significance level used for conditional independence tests.  
  2) indep_test: The choice of independence test method (e.g., 'fisherz', 'chisq', 'kci').  

• Tuning Difficulty  
  – α has recommended defaults that vary with sample size (e.g., 0.1 for <500 samples, 0.05 for medium sizes up to 10,000, and 0.01 for very large samples). These guidelines help non-experts adopt reasonable values. An LLM or domain expert can refine α based on the trade-off between false positives and false negatives.  
  – indep_test selection is fairly straightforward since each test is suited to different data types or assumptions (linear vs. nonlinear, continuous vs. discrete, etc.).  

• Sensitivity  
  – α: A higher α typically makes the algorithm more liberal about discovering edges (at the risk of false positives). Conversely, a smaller α is more conservative, potentially missing weaker but true causal links. Benchmarks (File #2) indicate that MBOR shows stable performance on noisy or partially missing data, suggesting moderate resilience to slightly suboptimal α choices.  
  – indep_test: Switching from a simple method (e.g., 'fisherz') to a more complex kernel-based test (e.g., 'kci') increases computational cost but can detect more nuanced (e.g., nonlinear) relationships.  

• Critique/Extension  
  – Parameters that control statistical testing (α and indep_test) often directly influence both false positives and runtime cost.  
  – In contrast, methods that limit search complexity (e.g., restricting conditioning set sizes) are handled internally by MBOR but are not explicitly exposed as tunable parameters in the provided JSON.  

────────────────────────────────────────────────────────
2. Robustness & Scalability
────────────────────────────────────────────────────────
• Tolerance to Bad Data Quality  
  – Missing Data: According to the benchmarking results (File #2), MBOR’s composite performance score on scenarios with missing data was relatively high, suggesting that MBOR efficiently handles moderate amounts of missing data.  
  – Measurement/Observation Error: File #2 also shows favorable “performance” and “efficiency” levels under measurement error, meaning MBOR’s statistical tests maintain reasonable accuracy even when moderate noise is introduced.  

• Tolerance to Sparse/Dense Connected Systems  
  – Although the benchmark data does not explicitly quantify sparsity vs. density, information from external sources (File #3) often cites MBOR as capable of dealing with graphs that can be moderately dense. Some feedback indicates MBOR can adapt well when relationships are numerous, though it may require more computational resources.  

• Scalability  
  – Benchmarking results label MBOR with moderate-to-high efficiency scores. MBOR reportedly scales to large sample sizes and a growing number of variables without drastic performance drops, especially if the user employs faster independence tests (e.g., 'fastkci' or 'rcit').  
  – Practical thresholds noted in File #3 suggest MBOR remains feasible for thousands (and, in some references, tens of thousands) of variables, though runtime grows with more variables.  

• Critique/Extension  
  – Parallelization potential: MBOR’s modular independence tests, especially kernel-based ones, can often be parallelized. This helps mitigate runtime issues on very large datasets or complex non-linear data.  

────────────────────────────────────────────────────────
3. Mixed Data & Complex Functions
────────────────────────────────────────────────────────
• Noise Type  
  – MBOR does not strictly assume Gaussian noise; the user can select kernel-based tests (kci, fastkci, rcit) for more general, possibly non-Gaussian data.  

• Mixed Data (Continuous & Discrete)  
  – The “indep_test” hyperparameter supports 'chisq' (discrete) and 'gsq' (simple mixed). Combining these with continuous tests (e.g., 'fisherz') or kernel-based tests indicates MBOR can cover a broad range of data types.  

• Heterogeneous Data  
  – Under “Heterogeneity” in File #2, MBOR demonstrated relatively robust performance and efficiency. This implies that MBOR can remain stable even when data sources have different distributions, though strong distribution shifts may still require more careful test selection.  

• Complex Functional Forms  
  – By selecting 'kci', 'fastkci', or 'rcit', MBOR can detect nonlinear relationships. However, using these advanced tests may increase computational time.  

• Critique/Extension  
  – If the user defaults to simpler tests (e.g., 'fisherz'), MBOR behaves more like a linear/gaussian assumption method. For highly nonlinear problems, specialized tests are beneficial but more costly computationally.  
  – Overfitting can occur in small-sample scenarios if overly flexible tests are used (like advanced kernel-based tests) without adjusting α accordingly.  

────────────────────────────────────────────────────────
4. Computational Complexity
────────────────────────────────────────────────────────
• Theoretical Time Complexity  
  – Exact expressions are not explicitly provided in the known references. Generally, constraint-based algorithms can experience exponential worst-case complexity in the number of variables or conditioning set sizes. Tentatively, one might expect an upper bound resembling <temp>[O(n^k)]</temp> for some finite k, though MBOR’s heuristics aim to reduce this in practice.  

• Variability in Practical Usage  
  – As α decreases, the algorithm tends to conduct more conditional independence checks (since edges are harder to discard), which can increase runtime.  
  – Choosing a more advanced test like 'kci' increases the per-test complexity but may reduce false positives in complex scenarios.  

• Critique/Extension  
  – MBOR’s worst-case runtime versus typical performance may diverge significantly; real-world benchmarks (File #2) show it performing at a moderate-to-efficient level compared with other large-scale methods.  
  – Parallel architectures can help offset the computational cost of repeated independence tests, especially kernel-based or permutation-based methods.  

────────────────────────────────────────────────────────
5. Interpretability
────────────────────────────────────────────────────────
• Output Format  
  – MBOR typically outputs a Markov boundary (or Markov blanket) for each target variable. In graph form, it can be viewed as adjacency sets or a partial causal subgraph around the target.  

• Strength of the Output Format  
  – Focusing on each variable’s Markov boundary can be highly interpretable for feature selection tasks or localized causal analysis.  
  – Some implementations provide p-values or confidence scores for identified dependencies, though the availability of explicit confidence intervals may vary by library.  

• Limitations of the Output Format  
  – The orientation of edges in a complete causal graph (beyond local boundaries) may remain ambiguous if MBOR is used strictly in a local manner.  
  – In more complex networks (e.g., with feedback loops), interpreting each local boundary separately might require domain expertise to assemble a global picture.  

• Critique/Extension  
  – For domain-level explanation, merging local Markov boundaries into a cohesive directed acyclic graph can be challenging. Post-processing or domain knowledge often helps refine directions and confirm plausibility of discovered relationships.  

────────────────────────────────────────────────────────
6. Assumptions
────────────────────────────────────────────────────────
• Critical Assumptions  
  – Standard constraint-based assumptions, including the Markov and faithfulness conditions, and causal sufficiency (i.e., no unobserved confounders).  
  – MBOR also often assumes that a well-defined Markov boundary exists for each variable of interest.  

• Violation Impact  
  – If faithfulness is violated or hidden confounders exist, MBOR may fail to recover the true dependencies reliably.  
  – The benchmarking data (File #2) shows MBOR maintaining decent stability under moderate noise and missing data, but severe assumption violations (e.g., extreme selection bias) were not explicitly tested.  

• Critique/Extension  
  – For partial violations (e.g., mild unmeasured confounding), MBOR might still yield insights, but the discovered boundaries or local structures could be incomplete or skewed.  
  – Some advanced variations incorporate hidden-variable detection, but that functionality is not explicitly detailed in the provided files.  

────────────────────────────────────────────────────────
7. (Optional) Real-World Benchmarks
────────────────────────────────────────────────────────
• Performance on Real Datasets  
  – MBOR demonstrated competitive or above-average performance in scenarios with missing data, measurement error, and heterogeneous data (File #2).  
  – Community discussions (File #3) suggest MBOR has been tested in large-scale feature selection contexts (e.g., microarray experiments with many thousands of variables), where it performed comparably to other incremental Markov boundary learners.  

• Practical Tips  
  – For moderate data sizes, the default α = 0.05 often yields a good balance of edge discovery and false-positive control.  
  – When dealing with strongly nonlinear or mixed data, switching from 'fisherz' to kernel-based tests (e.g., 'kci') can improve accuracy, albeit at higher computational cost.  
  – Users typically find success pairing MBOR with parallel processing for large-scale problems, especially if independence tests are repeated many times.  

• Common Pitfalls  
  – Using too high an α in small-sample settings may inflate the number of learned edges. Conversely, too small an α in very large datasets can increase runtime and risk under-discovery of true edges.  
  – Overlooking domain knowledge might lead to confusion when assembling local boundaries into a global causal picture.

────────────────────────────────────────────────────────

Overall, MBOR is a constraint-based method that localizes causal structure discovery via Markov boundaries and can adapt its independence tests to different data types and complexities. Its built-in handling of missing or noisy data and relatively efficient scalability with respect to both variables and samples make it a strong candidate for many real-world scenarios. However, like all constraint-based approaches, it relies on standard assumptions (e.g., faithfulness and sufficiency), so careful tuning of α and choosing an appropriate independence test are crucial to ensuring reliable and interpretable outcomes.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 10.0 | 3.64 | 3.0 | 2.0 | 3.0 |
| Heterogeneity | 5.5 | 1.50 | 5.0 | 2.0 | 4.0 |
| Measurement Error | 8.2 | 1.09 | 4.0 | 2.0 | 3.0 |
| Noise Type | 7.5 | 0.50 | 4.0 | 2.0 | 3.0 |
| Missing Data | 7.5 | 3.91 | 5.0 | 1.0 | 4.0 |
| Edge Probability | 8.0 | 2.16 | 3.0 | 2.0 | 3.0 |
| Discrete Ratio | 8.3 | 1.25 | 3.0 | 2.0 | 3.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 7.87
  – Average standard deviation: 2.01





===============================================

Think in-depth and thoroughly step by step. Please include the reasoning process, the ultimate reason why the picked algorithm beats the others and finally the selected algorithm in the JSON format. Cite/Quote quantity/number and references for the evidences of analyzing using one specific algorithm or not. Do not return any other text or comments:

{
  "reasoning": "reasoning process",
  "reason": "ultimate reason why it beats the others"
  "algorithm": "algorithm_name",
}
