You will conduct causal discovery on the Tabular Dataset ./demo_data/20250330_214809/CCS_Data/CCS_Data.csv containing the following Columns:

Cement	Blast_furnace_slag	Fly_ash	Water	Superplasticizer	Coarse_aggregate	Fine_aggregate	Age	Compressive_strength

The Detailed Background Information is listed below:

This is fake domain knowledge for debugging purposes.

The Statistics Information about the dataset is:

The dataset has the following characteristics:

Data Type: The overall data type is Continuous.

The sample size is 1030 with 9 features. This dataset is not time-series data. 

Data Quality: There are no missing values in the dataset.

Statistical Properties:
- Linearity: The relationships between variables are not predominantly linear.
- Gaussian Errors: The errors in the data do not follow a Gaussian distribution.
- Heterogeneity: The dataset is not heterogeneous. 





Based on the above information, please select the best-suited algorithm from the following candidate (the order of the algorithm candidates is not important):

dict_keys(['CDNOD', 'PC', 'InterIAMB'])

===============================================
Note that the user can only wait for 1440.0 minutes for the algorithm execution, please ensure the time cost of the selected algorithm would not exceed it!
The estimated time costs of the following algorithms using linear estimation methods (e.g. Fisherz for constraint-based methods, BIC for score-based methods) are below. Use it as a reference for the algorithm runtime comparison, note that the absolute value might changes significantly when the estimation methods are not linear (e.g. KCI for constraint-based methods, Generalized score for score-based methods). Consider the time cost wisely when selecting the algorithm, it is critical but less important than the performance when the time cost does not exceed the waiting time. As long as the timecost difference is not that large 1440.0, you should pivot more on the performance.

CDNOD: 1.3 minutes
PC: 1.0 minutes
InterIAMB: 1.0 minutes

At the same time, be careful about the current device availability for GPU/CUDA acceleration. Note that some algorithm settings would need GPU to run, which could be a indirect limitation on the algorithm application potential:


Current machine doesn't support CUDA, do not choose any GPU-powered algorithms.

===============================================
Detailed Profiles of the algorithm candidates are shown here. We also include the supported hyperparamerters as additional information to help you know the potentials of each algorithm combining various hyperparamerter settings. You MUST actively combine and reason with them:

======================================

# CDNOD

Below is a structured profile of the CDNOD (Constraint-based causal Discovery from Nonstationary or heterogeneous Data) algorithm, following the seven dimensions specified in the meta-prompt. The information presented integrates the provided hyperparameter settings, benchmarking results, and external knowledge. 

────────────────────────────────────────────────────────────
1. Hyper-Parameters Sensitivity
────────────────────────────────────────────────────────────

• Number of Key Hyperparameters  
  - CDNOD's primary hyperparameters include:  
    1. α (alpha): The significance level for conditional independence tests.  
    2. indep_test: The choice of independence test (e.g., "fisherz_cpu", "fisherz_gpu", "chisq_cpu", "chisq_gpu", "cmiknn_gpu", etc.).  
    3. depth: The maximum depth in the skeleton discovery phase.  
  - These three hyperparameters—alpha, indep_test, and depth—are generally the most influential in determining both the algorithm's accuracy and runtime.

• Tuning Difficulty  
  - Default settings are typically sufficient for many domains (e.g., alpha=0.05, indep_test="fisherz_cpu", depth=-1). However, the selected values can significantly affect performance when sample sizes or graph sizes are extreme.  
  - The guidelines for alpha (e.g., 0.1 for <500 samples, 0.05 for mid-range, 0.01 for very large samples) offer straightforward, data-driven rules. This means domain experts or automated routines can tune alpha more reliably given the sample size.  
  - For the independence test, recommended defaults exist depending on data type. GPU-accelerated tests are now available, providing significant performance improvements: "fisherz_gpu" for continuous data, "chisq_gpu" for discrete data, and "cmiknn_gpu" for nonparametric testing with GPU acceleration.

• Sensitivity  
  - Alpha exerts a substantial influence on the graph's sparsity: smaller alpha yields sparser graphs, reducing false positives but potentially missing weaker edges. Larger alpha leads to denser graphs, possibly increasing false positives.  
  - Depth affects the thoroughness of the skeleton search. A high (or unlimited) depth can improve accuracy on complex graphs but may sharply increase runtime. Lower depth settings speed up computations while potentially missing longer-range conditional dependencies.
  - Switching from CPU to GPU implementations (e.g., from "fisherz_cpu" to "fisherz_gpu") can dramatically improve runtime without affecting accuracy, making CDNOD much more practical for large datasets.

• Critique/Extension  
  - Hyperparameters controlling the search complexity (e.g., depth) most strongly influence runtime and can also affect correctness if restricted too aggressively.  
  - Hyperparameters tied to statistical tests (alpha, indep_test) have a more direct effect on false positives/negatives. In practice, balancing both sets of parameters is essential for robust performance.
  - The GPU-accelerated tests provide extreme speedups compared to their CPU counterparts, especially for large datasets, addressing one of the traditional limitations of constraint-based methods.

────────────────────────────────────────────────────────────
2. Robustness & Scalability
────────────────────────────────────────────────────────────

• Tolerance to Bad Data Quality  
  - Missing Data: CDNOD is not natively specialized in sophisticated imputation, but it can accommodate partial missingness if the user or a preprocessing routine properly handles or imputes missing entries. The benchmarking results suggest it performs very well overall in missing-data scenarios (ranking near the top in that category).  
  - Measurement/Observation Error: Benchmarks also indicate strong tolerance to moderate or even severe noise, placing CDNOD among the more robust methods tested in handling measurement error.

• Tolerance to Sparse/Dense Connected Systems  
  - While not extensively detailed in the provided reports, constraint-based methods typically show stable performance on sparse networks. Dense networks can still be handled, but the computational load and potential for spurious edges may grow. Depth constraints can partially mitigate these issues.

• Scalability  
  - With the integration of GPU-accelerated independence tests ('fisherz_gpu', 'chisq_gpu', and 'cmiknn_gpu'), CDNOD's scalability has significantly improved. The GPU tests provide extreme speedups compared to their CPU counterparts, especially for large datasets.
  - According to the hyperparameter information, 'cmiknn_gpu' offers a 1000x speedup compared to CPU-based 'kci' with comparable accuracy, making nonparametric testing viable for much larger datasets.
  - Even with GPU acceleration, restricting depth remains an important strategy for very large graphs to manage computational complexity.

• Critique/Extension  
  - Parallelization: Constraint-based methods (including CDNOD) can often be parallelized by splitting conditional independence tests across computing cores. The GPU-accelerated tests take this to another level, providing massive parallelization on GPU hardware.
  - Approximation options like restricting the skeleton search depth or using GPU-accelerated tests strike an excellent balance between runtime and accuracy, making CDNOD much more competitive for large-scale applications.

────────────────────────────────────────────────────────────
3. Mixed Data & Complex Functions
────────────────────────────────────────────────────────────

• Noise Type  
  - CDNOD does not assume strictly Gaussian noise. It supports a variety of independence tests (including kernel-based nonparametric methods), making it suitable for non-Gaussian scenarios.
  - The GPU-accelerated 'cmiknn_gpu' test provides a powerful nonparametric option that can handle complex noise distributions with significantly improved performance.

• Mixed Data (Continuous & Discrete)  
  - CDNOD can integrate different conditional independence tests: 'fisherz_cpu'/'fisherz_gpu' for continuous variables; 'chisq_cpu'/'chisq_gpu' for discrete; or a mix for hybrid data.
  - Both CPU and GPU implementations are available for different data types, allowing for efficient processing regardless of data characteristics.

• Heterogeneous Data  
  - CDNOD is specifically designed to address nonstationary and heterogeneous conditions, which is one of its defining strengths (confirmed by top performance in the "Heterogeneity" category of the provided benchmarks).
  - The GPU-accelerated tests make it much more practical to apply CDNOD to large heterogeneous datasets that would be computationally prohibitive with CPU-only implementations.

• Complex Functional Forms  
  - When the relationships between variables are nonlinear, the 'cmiknn_gpu' test provides an excellent option for capturing complex dependencies with dramatically improved performance compared to CPU-based nonparametric tests.
  - The 1000x speedup of 'cmiknn_gpu' compared to 'kci' makes nonparametric testing practical for much larger datasets, allowing CDNOD to handle complex functional forms at scale.

• Critique/Extension  
  - If users initially rely on purely linear tests (e.g., "fisherz_cpu" or "fisherz_gpu") for data that are strongly nonlinear, they risk underspecifying relationships. Therefore, domain knowledge or preliminary data checks can guide the choice of a more robust independence test like 'cmiknn_gpu'.
  - Overfitting can occur if alpha is set too high while a flexible, nonlinear test is used. Proper emphasis on cross-validation or domain-driven alpha choices is advisable.

────────────────────────────────────────────────────────────
4. Computational Complexity
────────────────────────────────────────────────────────────

• Theoretical Time Complexity  
  - As a constraint-based algorithm, skeleton discovery and orientation typically have a complexity that grows with both the number of variables and the maximum conditioning set size. A simplified notation for the worst-case complexity can be denoted as:  
    O(p^k)  
  where p is the number of variables and k depends on the search depth. Exact exponents vary based on independence test complexity and data sample size.

• Variability in Practical Usage  
  - If depth is set to -1 (unlimited), the search can become computationally heavy for large graphs. Reducing it to smaller values (e.g., 1–3) often substantially cuts runtime.  
  - Selecting GPU-accelerated tests ('fisherz_gpu', 'chisq_gpu', 'cmiknn_gpu') provides dramatic efficiency gains with no trade-offs in accuracy, making CDNOD much more practical for large-scale applications.
  - The 'cmiknn_gpu' test in particular offers a 1000x speedup compared to CPU-based 'kci', making nonparametric testing viable for much larger datasets.

• Critique/Extension  
  - In real-world datasets with many variables, worst-case complexity can be mitigatingly high, but typical performance can be significantly better when the underlying network is not extremely dense.  
  - The GPU-accelerated tests provide massive parallelization, dramatically reducing the practical runtime for large datasets and making CDNOD much more competitive for large-scale applications.

────────────────────────────────────────────────────────────
5. Interpretability
────────────────────────────────────────────────────────────

• Output Format  
  - CDNOD typically produces a directed acyclic graph (DAG) or partially directed graph (CPDAG) representing causal structures. It may also provide adjacency matrices and edge confidence scores, depending on the implementation.

• Strength of the Output Format  
  - Graphical outputs are straightforward for users to interpret, with edges representing putative causal directions. Some implementations offer p-values or confidence measures that accompany edge findings.

• Limitations of the Output Format  
  - Like most constraint-based methods, certain edges can remain unoriented if the data are insufficient or if the relevant conditional independence tests are ambiguous.  
  - The underlying changing distribution (nonstationarity) can sometimes complicate orientation, leading to partial orientation in complex scenarios.

• Critique/Extension  
  - Domain experts often refine or prune orientations after the algorithm's initial output. In contexts like multi-stage or time-varying processes, additional domain knowledge can greatly enhance interpretability.
  - The improved scalability from GPU-accelerated tests allows CDNOD to be applied to larger, more complex datasets, potentially yielding more comprehensive and informative causal graphs.

────────────────────────────────────────────────────────────
6. Assumptions
────────────────────────────────────────────────────────────

• Critical Assumptions  
  - Markov and Faithfulness: Variables follow standard causal discovery assumptions that d-separations correspond to conditional independencies.  
  - Causal Sufficiency (with a twist): CDNOD assumes no unobserved confounders that cannot be partly captured by domain indicators or time indices in nonstationary settings.  
  - Nonstationarity/Heterogeneity: CDNOD leverages changes in distribution to help identify causal directions.

• Violation Impact  
  - If truly hidden confounders exist that are unrelated to domain/time indicators, performance may degrade or lead to incorrect orientations.  
  - If the data deviate heavily from the faithfulness assumption, false positives or false negatives can increase in the learned graph.

• Critique/Extension  
  - Extensions of CDNOD can handle partially missing or ambiguous domain indices.  
  - In practice, moderate violations of the assumptions (e.g., mild confounding) might still yield useful causal insights, but caution is warranted.
  - The availability of GPU-accelerated nonparametric tests like 'cmiknn_gpu' makes it more practical to apply CDNOD to complex datasets where linear assumptions may not hold.

────────────────────────────────────────────────────────────
7. (Optional) Real-World Benchmarks
────────────────────────────────────────────────────────────

• Performance on Real Datasets  
  - According to some demonstrations (e.g., financial market data applications), CDNOD performs successfully in capturing dynamic causal structures underlying changing market conditions.  
  - Benchmarks indicate it is among the stronger algorithms in contexts involving noise, measurement error, and missing data. In those areas, CDNOD scored near the top in overall performance.
  - The integration of GPU-accelerated tests makes CDNOD much more practical for large real-world datasets that would be computationally prohibitive with CPU-only implementations.

• Practical Tips  
  - For large sample sizes (>10,000), use a lower alpha (e.g., α=0.01) and consider a smaller depth to control runtime.  
  - If data are suspected of containing strongly nonlinear relationships, opt for the GPU-accelerated 'cmiknn_gpu' test, which provides a 1000x speedup compared to CPU-based 'kci' with comparable accuracy.
  - For large datasets, always use the GPU-accelerated tests ('fisherz_gpu', 'chisq_gpu', 'cmiknn_gpu') when GPU hardware is available, as they provide extreme speedups with no loss in accuracy.
  - Domain-driven insights can help refine or interpret partially oriented edges, especially in real-world settings like finance, biology, or social sciences.

────────────────────────────────────────────────────────────
Summary
────────────────────────────────────────────────────────────

CDNOD is specifically designed for causal discovery in nonstationary and heterogeneous data. Its ability to handle various data types (continuous, discrete, mixed), along with flexible independence test choices, makes it adaptable across multiple domains. With the integration of GPU-accelerated tests ('fisherz_gpu', 'chisq_gpu', and 'cmiknn_gpu'), its scalability has significantly improved, making it much more practical for large datasets. The 'cmiknn_gpu' test in particular provides a 1000x speedup for nonparametric testing compared to CPU-based alternatives, making CDNOD much more competitive for complex, non-linear causal discovery tasks. As with most constraint-based methods, interpretability is straightforward in graph form, though some edges may remain unoriented without further domain knowledge. Its robust performance in the face of measurement error, missing data, and heterogeneous sources underscores its value for complex real-world applications where distributions shift across time or other conditions.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 9.4 | 2.29 | 2.0 | 5.0 | 3.0 |
| Heterogeneity | 9.5 | 1.50 | 2.0 | 4.0 | 2.0 |
| Measurement Error | 11.0 | 0.00 | 3.0 | 4.0 | 2.0 |
| Noise Type | 13.0 | 2.00 | 1.0 | 4.0 | 2.0 |
| Missing Data | 9.2 | 1.79 | 2.0 | 5.0 | 2.0 |
| Edge Probability | 10.0 | 0.82 | 3.0 | 4.0 | 3.0 |
| Discrete Ratio | 10.7 | 1.25 | 2.0 | 4.0 | 2.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 10.40
  – Average standard deviation: 1.38


## Supported hyperparameters: {
    "algorithm_name": "CDNOD",
    "alpha": {
        "meaning": "Significance level in (0, 1)",
        "available_values": {
            "default": 0.05,
            "small_sample": 0.1,
            "large_sample": 0.01
        },
        "expert_suggestion": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "indep_test": {
        "meaning": "Independence test method",
        "available_values": {
            "default": "fisherz_cpu",
            "continuous_cpu": "fisherz_cpu",
            "continuous_gpu": "fisherz_gpu",
            "discrete_cpu": "chisq_cpu",
            "discrete_gpu": "chisq_gpu",
            "robust_nonlinear_cpu": "kci_cpu",
            "robust_nonlinear_gpu": "cmiknn_gpu",
            "fast_robust_nonlinear_cpu": "fastkci_cpu",
            "approximate_fast_nonlinear_cpu": "rcit_cpu"
        },
        "expert_suggestion": "Choose based on data type and hardware. CPU TESTS: 'fisherz_cpu' for linear continuous data; 'chisq_cpu' for discrete data (only applied for pure discrete data); 'kci_cpu' for nonlinear data (very slow, use only with variable size < 15 and sample size < 1500); 'fastkci_cpu' is faster than kci (use with < 20 variables and sample size < 3000); 'rcit_cpu' is the fastest approximation of kci (use with < 30 variables and sample size < 5000). GPU TESTS: 'fisherz_gpu' and 'chisq_gpu' (only applied for pure discrete data) work similarly but are extremely fast because of GPU's super parallel computing; 'cmiknn_gpu' is a GPU-accelerated nonparametric test that provides 1000x speedup compared to CPU-based 'kci' with comparable accuracy. GPU acceleration is strongly recommended for large datasets."
    },
    "depth": {
        "meaning": "Maximum depth for skeleton search",
        "available_values": {
            "default": -1,
            "small_graph": 6,
            "medium_graph": 4,
            "large_graph": 2,
            "extra_large_graph": 1
        },
        "expert_suggestion": "Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1."
    }
}

======================================

# PC

Below is a seven-dimension profile of the PC (Peter–Clark) algorithm, integrating (1) the hyperparameter file, (2) the benchmarking results, and (3) external knowledge about the algorithm and its typical use cases. References or paraphrased remarks from the external sources are indicated where relevant.

────────────────────────────────────────────────────────────────────────
1. HYPER-PARAMETERS SENSITIVITY
────────────────────────────────────────────────────────────────────────
• Number of Key Hyperparameters  
  - The PC algorithm has three main hyperparameters:  
    1. α (alpha): Significance level for conditional independence tests.  
    2. indep_test: Choice of conditional independence test (e.g., Fisher's Z, chi-square, G-square, KCI variants) with both CPU and GPU implementations.  
    3. depth: Maximum depth for the skeleton search phase.  

• Tuning Difficulty  
  - α is typically the most critical parameter, with recommended defaults in the provided file (e.g., 0.05 for moderate sample sizes, 0.1 for smaller samples, 0.01 for very large samples). These guidelines simplify tuning for different dataset sizes.  
  - The choice of indep_test can be straightforward (Fisher's Z for continuous data, chi-square for discrete data, etc.), with GPU-accelerated options now available for significantly improved performance. The selection includes 'fisherz_cpu'/'fisherz_gpu' for continuous data, 'chisq_cpu'/'chisq_gpu' for discrete data, and 'cmiknn_gpu' for nonparametric testing with GPU acceleration.
  - depth has a default of -1 (unlimited), but it can be restricted to reduce runtime for large graphs. The suggested rule of thumb scales with the number of nodes, setting smaller depths for larger graphs.  

• Sensitivity  
  - Small changes in α can produce noticeable effects on edge detection: lower α yields more conservative edge selection (fewer false positives) but may lead to more false negatives.  
  - Shifting from an unlimited depth (depth = -1) to a restricted depth (like 1 to 3) can significantly speed up the search on large graphs but may miss subtler causal relationships.  
  - Changing the independence test (e.g., from a linear Fisher test to a non-parametric test like KCI or cmiknn_gpu) can likewise alter both runtime and the ability to capture non-linear causal links.  

• Critique/Extension  
  - Parameters that control graph-search complexity (depth) can drastically reduce runtime but may compromise completeness in highly connected graphs.  
  - The α threshold has more direct influence on statistical testing; even small shifts in α can change the number of edges found. Hence, domain knowledge is often helpful to choose a good α.  
  - The availability of GPU-accelerated tests provides a significant performance boost without sacrificing accuracy, making PC more viable for larger datasets.

────────────────────────────────────────────────────────────────────────
2. ROBUSTNESS & SCALABILITY
────────────────────────────────────────────────────────────────────────
• Tolerance to Bad Data Quality  
  - Benchmarks (File #2) indicate that PC's performance tends to degrade when data quality drops (e.g., missing data or measurement error). In fact, PC ranked relatively low in measurement error and missing data tolerance, suggesting it does not handle either type of bad data as robustly as some other methods.  
  - It lacks built-in methods for imputation; in practice, users might preprocess missing values or use more advanced PC variants (e.g., PC-missing).  

• Tolerance to Sparse vs. Dense Connected Systems  
  - PC often performs better on sparse systems, since the number of conditional independence tests remains more manageable. For dense graphs, the algorithm may require many tests, increasing the risk of both false positives and elevated runtime.  
  - From a benchmarking standpoint, when confronted with moderately dense networks, performance declines more in runtime than in accuracy, highlighting the combinatorial explosion of tests in denser graphs.  

• Scalability  
  - With the integration of GPU-accelerated independence tests ('fisherz_gpu', 'chisq_gpu', and 'cmiknn_gpu'), PC's scalability has significantly improved. The GPU tests provide extreme speedups compared to their CPU counterparts, especially for large datasets.
  - According to the hyperparameter file, 'cmiknn_gpu' offers a 1000x speedup compared to CPU-based 'kci' with comparable accuracy, making nonparametric testing viable for much larger datasets.
  - Even with GPU acceleration, restricting depth remains an important strategy for very large graphs to manage computational complexity.

• Critique/Extension  
  - Parallel-PC implementations exist and can be employed on multi-core hardware to improve speed.  
  - Using approximation strategies (like a lower maximum depth or partitioning variables) can be beneficial when the dataset contains hundreds or thousands of variables, though these techniques might weaken correctness guarantees.  
  - The GPU-accelerated tests make PC much more practical for large-scale applications, addressing one of its traditional limitations.

────────────────────────────────────────────────────────────────────────
3. MIXED DATA & COMPLEX FUNCTIONS
────────────────────────────────────────────────────────────────────────
• Noise Type  
  - The PC algorithm's traditional setup often presupposes approximately Gaussian errors for continuous data, but other independence tests allow for broader noise distributions.  
  - Benchmarks (File #2) suggested that PC performed somewhat lower when confronted with more diverse or non-Gaussian noise, although advanced tests (KCI, RCIT, and now cmiknn_gpu) can address non-linearity.  

• Mixed Data (Continuous & Discrete)  
  - PC can integrate different conditional independence tests: Fisher's Z or partial correlation for continuous variables; chi-square or G-square for discrete; or a mix for hybrid data.  
  - Some PC implementations provide direct support for mixed data via specialized tests like G-square, allowing simultaneous handling of continuous and categorical variables.  
  - Both CPU and GPU implementations are available for different data types, with 'fisherz_cpu'/'fisherz_gpu' for continuous data and 'chisq_cpu'/'chisq_gpu' for discrete data.

• Heterogeneous Data  
  - Benchmark results (File #2) show it scored in the middle ranges under "Heterogeneity." It can handle moderate changes in distribution across variables, provided a suitable test is chosen.  
  - Marked shifts across subsets of data may require domain-driven adjustments or advanced versions (like FCI for partial latent confounding).  

• Complex Functional Forms  
  - The standard PC algorithm is tailored for linear (or near-linear) dependencies, but employing kernel-based tests can detect non-linear relationships.
  - The GPU-accelerated 'cmiknn_gpu' test provides a powerful nonparametric option for detecting complex, non-linear relationships with significantly improved computational efficiency compared to CPU-based alternatives like 'kci_cpu'.
  - Other non-linear options include 'fastkci_cpu' (faster than kci) and 'rcit_cpu' (fastest approximation of kci), each with their own trade-offs between speed and accuracy.

• Critique/Extension  
  - Users often underestimate how crucial the independence test choice is when dealing with non-linear patterns. A robust non-parametric test can significantly improve detection of non-linear causal links.  
  - Overfitting concerns can arise in small samples if a highly flexible test is used without proper regularization or multiple testing corrections.  
  - The addition of GPU-accelerated tests, especially 'cmiknn_gpu', makes non-linear causal discovery much more practical for larger datasets.

────────────────────────────────────────────────────────────────────────
4. COMPUTATIONAL COMPLEXITY
────────────────────────────────────────────────────────────────────────
• Theoretical Time Complexity  
  - The PC algorithm can have a worst-case time complexity of <temp>[O(n^(k+2))]</temp>, where n is the number of variables and k is the maximum degree of a node in the true graph.  

• Variability in Practical Usage  
  - Despite the polynomial (sometimes high-order) worst-case bound, many real-world graphs are sparse, so runtime is often much lower.  
  - Increasing depth or lowering α can drive up the number of tests, and thus runtime can spike. Conversely, restricting depth dampens the combinatorial explosion but risks missing some edges.  
  - The GPU-accelerated tests ('fisherz_gpu', 'chisq_gpu', 'cmiknn_gpu') dramatically reduce the practical runtime, especially for large datasets, making PC much more viable for real-world applications.

• Critique/Extension  
  - The worst-case scenario might be rarely encountered in practical sparse settings. However, in denser structures or with large depth parameters, runtime can indeed grow significantly.  
  - GPU acceleration provides a substantial practical improvement in computational efficiency without changing the theoretical complexity, making PC more competitive with other algorithms for large-scale causal discovery.

────────────────────────────────────────────────────────────────────────
5. INTERPRETABILITY
────────────────────────────────────────────────────────────────────────
• Output Format  
  - PC outputs a CPDAG (Completed Partially Directed Acyclic Graph). This graph shows which edges are definitely directed, as well as edges uncertain about orientation.  
  - Some implementations also provide adjacency matrices with confidence measures (e.g., p-values).  

• Strength of the Output Format  
  - CPDAGs are considered quite interpretable: they clarify which directions are inferred and which remain undetermined.  
  - Many software packages (e.g., Tetrad, pcalg) provide visualization tools to help interpret a CPDAG.  

• Limitations of the Output Format  
  - Edges in the "partially" directed region can generate ambiguity, as the algorithm leaves some edges unoriented if the data are insufficiently informative.  
  - In high-dimensional or complex domains, the resulting graph might still be large and cumbersome to interpret without additional domain knowledge.  

• Critique/Extension  
  - Domain experts frequently refine or manually orient ambiguous edges, especially in specialized fields such as genomics or neuroscience.  
  - Some suggest performing a stability or bootstrap analysis to highlight edges that are consistently inferred across subsamples.  

────────────────────────────────────────────────────────────────────────
6. ASSUMPTIONS
────────────────────────────────────────────────────────────────────────
• Critical Assumptions  
  - Causal Markov condition: Each variable is conditionally independent of its non-descendants, given its parents.  
  - Faithfulness: All and only the conditional independencies in the true structure are reflected in the data.  
  - Causal sufficiency: No unobserved confounders of the measured variables.  
  - Acyclicity: The underlying causal structure forms a Directed Acyclic Graph (DAG).  

• Violation Impact  
  - Missing confounders can lead to spurious or missing edges.  
  - Unfaithful data-generating mechanisms can hide true edges or create extra independencies.  
  - Feedback loops or cyclic structures break the acyclicity assumption, causing the algorithm to infer incomplete or incorrect edges.  

• Critique/Extension  
  - When hidden variable confounding is suspected, variants like FCI (Fast Causal Inference) or RFCI are recommended instead of basic PC.  
  - Many real-world systems include some feedback or non-stationary behavior, so partial violations are not uncommon. Users often need to test sensitivity or adopt extended algorithms.  

────────────────────────────────────────────────────────────────────────
7. (OPTIONAL) REAL-WORLD BENCHMARKS
────────────────────────────────────────────────────────────────────────
• Performance on Real Datasets  
  - Across a variety of real datasets (e.g., gene-expression data, brain connectivity data), PC tends to perform competitively for structure learning, provided the data are not extremely noisy or riddled with missing values.  
  - In some evaluations, PC was among the more accurate approaches for sparse graphs but was sometimes outperformed by score-based or hybrid methods on very noisy or dense data.  

• Practical Tips  
  - Combining PC with domain knowledge (e.g., known biological pathways) often yields improved orientation of edges.  
  - Limiting depth can drastically reduce computation time for high-dimensional data, but practitioners must confirm that the trade-off in missed edges is acceptable.  
  - Discussion forums and user groups consistently recommend verifying the sample size is sufficient for the chosen α level, or considering small-sample corrections if data are limited.  
  - For large datasets or when dealing with non-linear relationships, GPU-accelerated tests ('fisherz_gpu', 'chisq_gpu', 'cmiknn_gpu') are strongly recommended for their significant performance benefits.

────────────────────────────────────────────────────────────────────────
CONCLUSION
────────────────────────────────────────────────────────────────────────
The PC algorithm remains a flagship approach in constraint-based causal discovery, prized for its interpretability (CPDAG output) and relatively direct hyperparameter tuning guidelines (notably α and depth). With the integration of GPU-accelerated independence tests, it has become much more scalable and practical for large datasets. It is best applied in scenarios where:  
• The graph is not excessively dense.  
• The data generally meet Markov and faithfulness assumptions.  
• There are no severe missing data or measurement error problems, or these issues are pre-processed/handled externally.  
• GPU acceleration is available for large datasets or when using nonparametric tests for non-linear relationships.

Recent developments in GPU acceleration, alternative independence tests, and specialized PC variants help address non-linearities, mixed data, and large-scale settings. The 'cmiknn_gpu' test in particular provides a 1000x speedup for nonparametric testing compared to CPU-based alternatives, making PC much more competitive for complex, non-linear causal discovery tasks. Nonetheless, potential users must keep in mind the algorithm's sensitivity to significance thresholds, data assumptions, and the combinatorial explosion of conditional tests in bigger or denser networks.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 8.1 | 2.47 | 3.0 | 5.0 | 3.0 |
| Heterogeneity | 8.2 | 1.30 | 3.0 | 5.0 | 3.0 |
| Measurement Error | 9.0 | 0.00 | 3.0 | 5.0 | 3.0 |
| Noise Type | 10.5 | 1.50 | 2.0 | 5.0 | 2.0 |
| Missing Data | 6.5 | 1.80 | 3.0 | 4.0 | 4.0 |
| Edge Probability | 7.7 | 3.40 | 3.0 | 5.0 | 3.0 |
| Discrete Ratio | 10.0 | 0.82 | 3.0 | 5.0 | 3.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 8.58
  – Average standard deviation: 1.61


## Supported hyperparameters: {
    "algorithm_name": "PC",
    "alpha": {
        "meaning": "Desired significance level in (0, 1)",
        "available_values": {
            "default": 0.05,
            "small_sample": 0.1,
            "large_sample": 0.01
        },
        "expert_suggestion": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "indep_test": {
        "meaning": "Independence test method",
        "available_values": {
            "default": "fisherz_cpu",
            "continuous_cpu": "fisherz_cpu",
            "continuous_gpu": "fisherz_gpu",
            "discrete_cpu": "chisq_cpu",
            "discrete_gpu": "chisq_gpu",
            "robust_nonlinear_cpu": "kci_cpu",
            "robust_nonlinear_gpu": "cmiknn_gpu",
            "fast_robust_nonlinear_cpu": "fastkci_cpu",
            "approximate_fast_nonlinear_cpu": "rcit_cpu"
        },
        "expert_suggestion": "Choose based on data type and hardware. CPU TESTS: 'fisherz_cpu' for linear continuous data; 'chisq_cpu' for discrete data (only applied for pure discrete data); 'kci_cpu' for nonlinear data (very slow, use only with variable size < 15 and sample size < 1500); 'fastkci_cpu' is faster than kci (use with < 20 variables and sample size < 3000); 'rcit_cpu' is the fastest approximation of kci (use with < 30 variables and sample size < 5000). GPU TESTS: 'fisherz_gpu' and 'chisq_gpu' (only applied for pure discrete data) work similarly but are extremely fast because of GPU's super parallel computing; 'cmiknn_gpu' is a GPU-accelerated nonparametric test that provides 1000x speedup compared to CPU-based 'kci' with comparable accuracy. GPU acceleration is strongly recommended for large datasets."
    },
    "depth": {
        "meaning": "Maximum depth for skeleton search",
        "available_values": {
            "default": -1,
            "small_graph": 6,
            "medium_graph": 4,
            "large_graph": 2,
            "extra_large_graph": 1
        },
        "expert_suggestion": "Use -1 for unlimited depth. For large graphs, limiting depth (e.g., 1-3) can significantly speed up the algorithm at the cost of some accuracy. A graph with node number < 10, use depth 6; A graph with node number 10 - 25, use depth 4; A graph with node number 25-50, use depth 2; A graph with node number > 50, use depth 1."
    }
}

======================================

# InterIAMB

Below is an in-depth profile of InterIAMB, organized around the seven dimensions (or “degrees”) specified in the meta-prompt. The following draws on the provided hyperparameter definitions, the comparative benchmarking results, external online information about InterIAMB, and general knowledge of Markov blanket (MB) and causal discovery methods.

────────────────────────────────────────────────────────
1. Hyper-Parameters Sensitivity
────────────────────────────────────────────────────────

• Number of Key Hyperparameters  
  InterIAMB’s foundational hyperparameter is the alpha (α) significance level for conditional independence testing. In practice, there are also choices of which independence test (fisherz, chisq, etc.) to use, but α is by far the most impactful parameter guiding the algorithm. Hence, we can consider two main critical hyperparameters for InterIAMB:  
  1) alpha (the significance threshold).  
  2) indep_test (choice of independence test).  

• Tuning Difficulty  
  – Alpha: Default guidance is straightforward. For small samples (<500), a higher alpha (e.g., 0.1) is often suggested to avoid missing significant edges. For moderate sample sizes (500–10,000), α = 0.05 is a common setting. For very large datasets (>10,000), α = 0.01 is recommended to reduce false positives.  
  – Independence Test: The algorithm offers recommended defaults (e.g., “fisherz” for continuous data, “chisq” for discrete, “gsq” for simpler mixed data). These guidelines limit the tuning difficulty because the user can often select the test based on data type.  

• Sensitivity  
  – Alpha: Small changes to α can shift how many conditional independencies are declared. Lower α typically yields a more conservative MB, with fewer false positives but potentially more false negatives. Higher α can speed up execution slightly (fewer re-checks needed), but can also add spurious edges.  
  – Independence Test Choice: Selecting a more advanced non-linear test (e.g., “kci” or “fastkci”) can improve detection of complex relationships but typically increases computation.  

• Critique/Extension  
  – For InterIAMB, most of the effect is from parameters controlling the significance testing step (especially α), rather than from search complexity parameters (it follows an iterative MB strategy). Thus, adjustments in significance threshold often dominate performance changes in practice.  

────────────────────────────────────────────────────────
2. Robustness & Scalability
────────────────────────────────────────────────────────

• Tolerance to Bad Data Quality  
  – Missing Data: Benchmarks suggest InterIAMB is not particularly robust when data are missing at random in large portions, indicating a drop in performance and efficiency compared to scenarios without missing data. Handling missingness usually requires either imputation or specialized independence tests, neither of which is a built-in feature of the standard InterIAMB formulation.  
  – Measurement/Observation Error: In the presence of moderate noise or errors, InterIAMB tends to remain fairly stable, but severe measurement error can compromise the correctness of the conditional independence checks—leading to more false edges or missing edges in the identified MB.  

• Tolerance to Sparse/Dense Connected Systems  
  – Overall, InterIAMB’s performance is typically quite solid for moderately dense networks. For highly sparse networks, it can sometimes require carefully tuning α since the algorithm might be overly conservative and fail to detect weaker associations. Conversely, in highly dense networks, the iterative MB approach can become more computationally expensive as more variables must be checked for conditional independence.  

• Scalability  
  – Sample Size: InterIAMB can process thousands of samples efficiently, particularly with optimized independence tests. However, extremely large sample sizes (>10,000) often warrant a stricter α to limit false positives.  
  – Number of Variables: InterIAMB improves on the original IAMB, but can still encounter computational bottlenecks with very high-dimensional data. Some parallelized or optimized implementations exist, which help scale to larger variable sets by parallel independence testing.  

• Critique/Extension  
  – Parallelization: Because InterIAMB’s main cost arises from repeated conditional independence tests, parallel or distributed strategies can alleviate runtime issues in large datasets if computing resources permit.  

────────────────────────────────────────────────────────
3. Mixed Data & Complex Functions
────────────────────────────────────────────────────────

• Noise Type  
  – InterIAMB itself does not strictly assume Gaussian noise; rather, the performance depends on the independence tests. If the user chooses “fisherz,” a linear-Gaussian assumption is made. For more general or non-Gaussian data, tests like “kci” or “rcit” allow detecting more complex dependencies.  

• Mixed Data (Continuous & Discrete)  
  – The algorithm can accommodate both types of variables by selecting, for instance, “gsq” or other specialized tests. The recommended practice is to carefully match data types to an appropriate test method so that the underlying assumptions are not violated.  

• Heterogeneous Data  
  – Benchmarks reflect moderate performance for heterogeneous datasets (e.g., multiple types of variables). InterIAMB can handle such data if the independence test is chosen appropriately, but advanced scenarios (massive amounts of unbalanced continuous/discrete variables) might require more carefully tuned hyperparameters or specialized tests.  

• Complex Functional Forms  
  – In principle, InterIAMB can uncover non-linear associations if a corresponding non-linear independence test is used. However, if a purely linear test (“fisherz”) is chosen, strong non-linear relationships may be missed or misinterpreted.  

• Critique/Extension  
  – As a constraint-based method, InterIAMB does not inherently model functional forms; it relies on the independence test’s ability to detect conditional dependencies. To capture very complex relationships, users are advised to select robust non-linear tests (e.g., “kci,” “rcit”).  

────────────────────────────────────────────────────────
4. Computational Complexity
────────────────────────────────────────────────────────

• Theoretical Time Complexity  
  – The complexity is often cited as <temp>[O(n^2)]</temp> in many references, though in practice it can grow faster if repeated independence tests become more extensive for large n or for complex network structures.  

• Variability in Practical Usage  
  – Increasing the number of variables or choosing more computationally heavy tests (e.g., kernel-based ones) can significantly expand runtime. Tighter α thresholds can also add overhead by requiring additional checks to confirm or reject a conditional independence.  
  – In benchmarks, InterIAMB was not the slowest method tested but does experience performance degradation with many variables and repeated conditional testing.  

• Critique/Extension  
  – InterIAMB’s worst-case behavior can be higher than the quoted O(n^2) depending on the network’s connectivity and iterative test expansions. Typical implementations, however, are optimized for average-case performance.  
  – Modern computing platforms (multi-core, GPU) can reduce bottlenecks if code is parallelized for independence tests.  

────────────────────────────────────────────────────────
5. Interpretability
────────────────────────────────────────────────────────

• Output Format  
  – Rather than outputting a full causal structure (like a DAG), InterIAMB focuses on the Markov blanket for each target variable: the minimal set of variables that shield the target from all other variables.  

• Strength of the Output Format  
  – The Markov blanket is highly interpretable: users see exactly which variables are directly relevant (parents, children, and co-parents) to a target. This can be ideal for feature selection or local neighborhood discovery in a causal sense.  

• Limitations of the Output Format  
  – The direction or orientation of edges is not inherently guaranteed. Thus, while InterIAMB indicates local dependencies, it does not by itself fully resolve causal directions or detect hidden confounders.  
  – Confidence metrics or p-values for edges can be parsed from the conditional independence tests, but are not always aggregated in a single “score.”  

• Critique/Extension  
  – For broader causal conclusions, many users combine InterIAMB with a separate orientation step (e.g., a scoring-based method or domain-expert input). This pipeline approach often yields improved interpretability of causal relations.  

────────────────────────────────────────────────────────
6. Assumptions
────────────────────────────────────────────────────────

• Critical Assumptions  
  – Causal Sufficiency: No significant latent confounders that connect variables in unobserved ways.  
  – Markov Condition: Each variable is conditionally independent of its non-descendants given its parents.  
  – Faithfulness (or “No cancellations”): The observed independencies in the data reflect the true underlying causal structure.  

• Violation Impact  
  – Violating causal sufficiency or faithfulness can degrade correctness of the discovered MB. This might result in missing edges or spurious associations if hidden confounders violate these assumptions.  
  – In some community-reported evaluations, small omissions to faithfulness did not drastically degrade InterIAMB, but major violations (e.g., strong confounding) caused significant inaccuracies.  

• Critique/Extension  
  – Certain InterIAMB variants relax these assumptions partially, but the standard InterIAMB remains a constraint-based approach relying heavily on them. Users encountering potential hidden confounding often resort to domain knowledge or extended algorithms for adjustments.  

────────────────────────────────────────────────────────
7. (Optional) Real-World Benchmarks
────────────────────────────────────────────────────────

• Performance on Real Datasets  
  – InterIAMB has performed competitively in several MB discovery benchmarks, frequently matching or outperforming earlier IAMB variants. In moderately sized real-world datasets, it often demonstrates a good balance between precision (avoiding false edges) and recall (identifying true associations).  
  – Compared to specialized high-dimensional methods, InterIAMB can be outpaced when the number of variables becomes extremely large, but remains quite practical for many standard real-world settings.  

• Practical Tips  
  – Combining InterIAMB with a subsequent orientation step or domain expertise is often recommended to interpret directions.  
  – Users handling data with highly non-linear relationships frequently choose a kernel-based, non-linear independence test.  
  – Missing data remain a common pitfall; pre-processing or specialized tests can alleviate performance dips.  

────────────────────────────────────────────────────────
Final Remarks
────────────────────────────────────────────────────────
InterIAMB is a notable variant of the IAMB family, offering iterative refinements that often improve speed and accuracy over the original. Its main hyperparameter, α, is easy to tune based on data size, and its flexible independence test options allow it to handle various data types or noise structures. The algorithm works well for moderate-dimensional problems and moderate levels of missing or noisy data, especially if paired with robust tests and parallel computing resources. However, it does not natively provide edge orientations or handle severe assumption violations, so further post-processing or hybrid approaches may be required for complete causal insights.

────────────────────────────────────────────────────────
Benchmarking Results
────────────────────────────────────────────────────────

• Comparative Performance
  – The benchmarking compared 19 different causal discovery algorithms across multiple scenarios.
  – Each algorithm was evaluated on performance (accuracy), efficiency (runtime), and composite metrics, which are represented as level scores from 1-5, with 5 being the best.
  – Levels scores of composite metrics combine performance and efficiency (weights: 0.8 and 0.2 respectively).
[NOTE] The ranking is smaller, the better. The level score is higher, the better.

• Algorithm Rankings

| Scenario | Rank (Mean) | Rank (Std Dev) | Performance (Level) | Efficiency (Level) | Composite (Level) |
|----------|-----------|---------|-------------|------------|------------|
| Scalability | 5.4 | 1.73 | 4.0 | 4.0 | 4.0 |
| Heterogeneity | 3.2 | 1.09 | 5.0 | 3.0 | 5.0 |
| Measurement Error | 5.0 | 0.00 | 4.0 | 3.0 | 4.0 |
| Noise Type | 6.0 | 1.00 | 4.0 | 3.0 | 4.0 |
| Missing Data | 2.2 | 1.64 | 5.0 | 3.0 | 5.0 |
| Edge Probability | 6.3 | 2.62 | 4.0 | 3.0 | 4.0 |
| Discrete Ratio | 5.0 | 0.00 | 4.0 | 3.0 | 4.0 |

• Analysis

  – Overall mean ranking across 7 scenarios: 4.74
  – Average standard deviation: 1.15



## Supported hyperparameters: {
    "algorithm_name": "InterIAMB",
    "alpha": {
        "meaning": "Desired significance level in (0, 1)",
        "available_values": {
            "default": 0.05,
            "small_sample": 0.1,
            "large_sample": 0.01
        },
        "expert_suggestion": "Adjust based on sample size, more conservative (lower) values for larger samples. If < 500, use 0.1; Else if 500-10000 (<10000 but >500), use 0.05; Else if > 10000, using 0.01."
    },
    "indep_test": {
        "meaning": "Independence test method",
        "available_values": {
            "default": "fisherz",
            "continuous": "fisherz",
            "discrete": "chisq",
            "robust_nonlinear": "kci",
            "fast_robust_nonlinear": "fastkci",
            "approximate_fast_nonlinear": "rcit"
        },
        "expert_suggestion": "Choose based on data type, 'fisherz' for linear continuous data; 'chisq' for discrete data (only applied for pure discrete data); 'kci' for nonlinear data (very slow, use only with variable size < 15 and sample size < 1500); 'fastkci' is faster than kci (use with < 20 variables and sample size < 3000); 'rcit' is the fastest approximation of kci (use with < 30 variables and sample size < 5000)."
    }
}



===============================================

Think in-depth and thoroughly step by step. Please include the reasoning process, the ultimate reason why the picked algorithm beats the others and finally the selected algorithm in the JSON format. Cite/Quote quantity/number and references for the evidences of analyzing using one specific algorithm or not. Do not return any other text or comments:

{
  "reasoning": "reasoning process",
  "reason": "ultimate reason why it beats the others"
  "algorithm": "algorithm_name",
}
