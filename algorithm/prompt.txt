Given the following user query:
no

For the data that have the following variables:
Id, MSSubClass, MSZoning, LotFrontage, LotArea, Street, LotShape, LandContour, Utilities, LotConfig, LandSlope, Neighborhood, Condition1, Condition2, BldgType, HouseStyle, OverallQual, OverallCond, YearRemodAdd, RoofStyle, RoofMatl, Exterior1st, Exterior2nd, MasVnrArea, ExterQual, ExterCond, Foundation, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinSF1, BsmtFinType2, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, Heating, HeatingQC, CentralAir, Electrical, 1stFlrSF, 2ndFlrSF, LowQualFinSF, GrLivArea, BsmtFullBath, BsmtHalfBath, FullBath, HalfBath, BedroomAbvGr, KitchenAbvGr, KitchenQual, TotRmsAbvGrd, Functional, Fireplaces, FireplaceQu, GarageType, GarageYrBlt, GarageFinish, GarageCars, GarageArea, GarageQual, GarageCond, PavedDrive, WoodDeckSF, OpenPorchSF, EnclosedPorch, 3SsnPorch, ScreenPorch, PoolArea, MiscVal, MoSold, YrSold, SaleType, SaleCondition, SalePrice, domain_index

And the following statistics:
The dataset has the following characteristics:

Data Type: The overall data type is Mixture.

The sample size is 1460 with 75 features. This dataset is not time-series data. Data Quality: There are missing values in the dataset.

Statistical Properties:
- Linearity: The relationships between variables are not predominantly linear.
- Gaussian Errors: The errors in the data do not follow a Gaussian distribution.
- Heterogeneity: The dataset is heterogeneous. 

- Domain Index: YearBuilt

All candidate algorithms, their descriptions and tags:
# Causal Discovery Algorithm Tagging

Below is a concise description of each tag category and its possible values:

1. Availability: Indicates if the algorithm is ready to use.
    ***ONLY USE AVAILABLE ALGORITHMSFOR NOW***
   - Available: Ready to use in the current codebase.
   - Unavailable: No longer maintained because of being not useful.

2. Method Type: Reflects the underlying approach.
   - Constraint-based: Utilizes conditional independence tests.
   - Score-based: Leverages score metrics for structure learning.
   - Functional Model-based: Employs functional models (e.g., LiNGAM) to capture relationships.
   - Hybrid: Integrates Constraint-based and Functional Model-based approaches to combine strengths.
   - MB-based: Finding causal graph mainly by discovering, aggregating and orienting Markov Blankets.
   - Continuous-optimization: Uses continuous optimization techniques to learn causal structure.

3. Functional form: Describes the assumed relationship between variables.
   - Linear: Assumes relationships are strictly linear.
   - Nonlinear: Assumes relationships are nonlinear.
   - Flexible: Accommodates both linear and nonlinear patterns.

4. Noise: Specifies the noise assumptions.
   - Gaussian: Assumes noise follows a Gaussian distribution.
   - NonGaussian: Assumes noise deviates from a Gaussian distribution.
   - Flexible: Accommodates both Gaussian and NonGaussian noise.

5. Latent Variable Tolerance: Indicates capability in handling unobserved confounders.
   - Robust: Highly tolerant to latent confounders.
   - Moderate: Acceptable tolerance toward latent variables.

6. Distribution Shift: Denotes assumptions about data distribution.
   - Heterogenous: Designed for datasets including varied or shifting distributions and indicators (domain index) of distribution shifts.
   - Homogenous: Assumes a consistent data distribution.

7. Scalability: Reflects the method's maximum capacity for handling dataset sizes (number of variables and samples).
   - Large-scale: Able to handle very large datasets (e.g., 1000 variables and 10000 samples).
   - Medium-to-large-scale: Able to handle medium-sized datasets (e.g., 100 variables and 10000 samples).
   - Medium-scale: Able to handle moderately sized datasets (e.g., 50 variables and 5000 samples).
   - Small-to-medium-scale: Able to handle small-to-medium-sized datasets (e.g., 25 variables and 5000 samples).
   - Small-scale: Only able to handle smaller datasets (e.g., 15 variables and 2500 samples).

8. Efficiency: Highlights computational speed and hardware utilization.
   - Extreme Fast (GPU): Optimized for GPU acceleration to have extreme fast speed.
   - Fast (GPU): Optimized for GPU acceleration to have fast speed.
   - Fast (CPU): Optimized with improvements on algorithm logic and parallelization to have fast speed.
   - Moderate: Reasonable speed with typical resources.
   - Slow: Computation-intensive with slower execution.
   - Extreme Slow: Significantly slow due to complex computations.

9. Empirical Performance: Summarizes reliability and robustness based on experiments.
   - Robust: Consistently strong performance (Level 4-5 in benchmarks).
   - Moderate: Generally reliable with some variability (Level 2-3 in benchmarks).
   - Limited: Weaker performance with significant variability (Level 1 in benchmarks).

10. Output Format: Specifies the graph structure produced.
    - DAG: Directed Acyclic Graph with full directional information.
    - CPDAG: Completed Partially Directed Acyclic Graph.
    - PAG: Partial Ancestral Graph accommodating latent confounding.

Below is the listing of causal discovery algorithms annotated with each tag type:

--- Constraint-based Methods -----------------------------------------------------------

PC: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

PCParallel: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

FCI: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible, 
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

CDNOD: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Heterogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

AcceleratedPC: {
    Availability: Available,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Extreme Fast (GPU),
    Empirical Performance: Limited,
    Output Format: CPDAG
}

AcceleratedCDNOD: {
    Availability: Unavailable,
    Method Type: Constraint-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Heterogenous,
    Scalability: Large-scale,
    Efficiency: Extreme Fast (GPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

--- MB-based Methods --------------------------------------------------------------

InterIAMB: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG
}

BAMB: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Robust,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Limited,
    Output Format: CPDAG
}

HITONMB: {
    Availability: Unavailable,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Limited,
    Output Format: CPDAG
}

IAMBnPC: {
    Availability: Available,
    Method Type: Hybrid,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG
}

MBOR: {
    Availability: Available,
    Method Type: MB-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

--- Score-based Methods --------------------------------------------------------------

GES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Slow,
    Empirical Performance: Limited,
    Output Format: CPDAG
}

FGES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Linear,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Moderate,
    Output Format: CPDAG
}

XGES: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Linear,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: CPDAG
}

GRaSP: {
    Availability: Available,
    Method Type: Score-based,
    Functional form: Flexible,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Robust,
    Output Format: CPDAG
}

--- Continuous-optimization Methods -------------------------------------------------

GOLEM: {
    Availability: Available,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-to-large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Robust,
    Output Format: DAG
}

CALM: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Extreme Slow,
    Empirical Performance: Moderate,
    Output Format: DAG
}

CORL: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Extreme Slow,
    Empirical Performance: Moderate,
    Output Format: DAG
}

NOTEARSLinear: {
    Availability: Available,
    Method Type: Continuous-optimization,
    Functional form: Linear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Moderate,
    Empirical Performance: Robust,
    Output Format: DAG
}

NOTEARSNonlinear: {
    Availability: Unavailable,
    Method Type: Continuous-optimization,
    Functional form: Nonlinear,
    Noise: Flexible,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Medium-scale,
    Efficiency: Slow,
    Empirical Performance: Moderate,
    Output Format: DAG
}

--- Functional Model-based Methods (LiNGAM Family) ----------------------------------

DirectLiNGAM: {
    Availability: Available,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Fast (CPU),
    Empirical Performance: Limited,
    Output Format: DAG
}

AcceleratedLiNGAM: {
    Availability: Available,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Large-scale,
    Efficiency: Fast (GPU),
    Empirical Performance: Limited,
    Output Format: DAG
}

ICALiNGAM: {
    Availability: Unavailable,
    Method Type: Functional Model-based,
    Functional form: Linear,
    Noise: NonGaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Slow,
    Empirical Performance: Moderate,
    Output Format: DAG
}

--- Hybrid Methods -----------------------------------------------------------------

Hybrid: {
    Availability: Unavailable,
    Method Type: Hybrid,
    Functional form: Flexible,
    Noise: Gaussian,
    Latent Variable Tolerance: Moderate,
    Distribution Shift: Homogenous,
    Scalability: Small-scale,
    Efficiency: Slow,
    Empirical Performance: Moderate,
    Output Format: DAG
}


Please choose the most suitable causal discovery algorithms up to top 5, for the data user provided and explain why these algorithms were chosen over the others. For the unselected algorithms, illustrate the reasons for each of them, why we do not choose it.


Current machine doesn't support CUDA, do not choose any GPU-powered algorithms.

The user accepts the output graph including undirected edges/undeterministic directions (CPDAG/PAG).

Think in-depth and thoroughly step by step. Please include the justifications, the descriptions and finally the selected algorithms in a JSON object. For example:

{
  "algorithms": [
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    },
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    },
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    }
  ],
  "algorithms_unwanted": [
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    },
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    },
    {
      "justification": "Explanation of why this algorithm is suitable for the given dataset.",
      "description": "Brief description of the algorithm.", 
      "name": "Algorithm Name",
    }
  ]
}