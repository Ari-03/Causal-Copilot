{
    "PC": {
      "Alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level (0-1). Lower values reduce false positives."
      },
      "Indep_test": {
        "type": "string",
        "values": ["fisherz", "chisg", "gsq"],
        "description": "Independence test: fisherz (continuous), chisg (discrete), gsq (mixed)."
      },
      "Depth": {
        "type": "integer",
        "values": [-1, 1, 2, 4, 6],
        "description": "Max conditioning set size. -1 for unlimited, 1-6 based on graph size."
      }
    },
    "FCI": {
      "Alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level (0-1). Lower values reduce false positives."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisg", "gsq"],
        "description": "Independence test: fisherz (continuous), chisg (discrete), gsq (mixed)."
      },
      "Depth": {
        "type": "integer",
        "values": [-1, 1, 2, 4, 6],
        "description": "Max conditioning set size. -1 for unlimited, 1-6 based on graph size."
      }
    },
    "GES": {
      "Score_func": {
        "type": "string",
        "values": ["local_score_BIC", "BDeu", "CV"],
        "description": "Scoring function based on data type and desired properties."
      },
      "maxP": {
        "type": "integer",
        "values": [null, 3, 5, 7],
        "description": "Maximum parents allowed. null for small graphs, 3-7 for larger graphs."
      }
    },
    "AcceleratedLiNGAM": {
      "measure": {
        "type": "string",
        "values": ["pwling", "kernel"],
        "description": "Independence measure: pwling (default) or kernel (for nonlinear)."
      }
    },
    "AcceleratedPC": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level based on sample size."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "kci"],
        "description": "Test method based on data characteristics."
      },
      "depth": {
        "type": "integer",
        "values": [-1, 1, 2, 4, 6],
        "description": "Max conditioning set size based on graph nodes."
      }
    },
    "BAMB": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level adjusted for sample size."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq", "kci", "fastkci", "rcit"],
        "description": "Independence test based on data type."
      }
    },
    "GRaSP": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level controlling false positives."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Independence test based on data type."
      }
    },
    "CDNOD": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.05],
        "description": "Significance level for independence tests."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Test method based on data type."
      },
      "depth": {
        "type": "integer",
        "values": [-1, 1, 2, 4, 6],
        "description": "Maximum conditioning set size based on graph size."
      }
    },
    "HITONMB": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance threshold by sample size."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Test method based on data type."
      }
    },
    "IAMBnPC": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level controlling algorithm sensitivity."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Test selection based on data type."
      }
    },
    "InterIAMB": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance threshold by sample size."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Test method matching data type."
      }
    },
    "MBOR": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level by sample size."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Test based on data type."
      }
    },
    "DirectLiNGAM": {
      "measure": {
        "type": "string",
        "values": ["pwling", "kernel"],
        "description": "Independence evaluation method."
      }
    },
    "ICALiNGAM": {
      "max_iter": {
        "type": "integer",
        "range": [1000, 10000],
        "suggested_values": [1000, 5000, 10000],
        "description": "Maximum iterations for ICA algorithm."
      },
      "thresh": {
        "type": "float",
        "range": [0.00001, 0.001],
        "suggested_values": [0.0001, 0.00001],
        "description": "Convergence threshold for stopping."
      }
    },
    "NOTEARSLinear": {
      "lambda1": {
        "type": "float",
        "range": [0.001, 0.1],
        "suggested_values": [0.001, 0.01, 0.1],
        "description": "Regularization parameter for sparsity."
      },
      "loss_type": {
        "type": "string",
        "values": ["l1", "l2"],
        "description": "Type of sparsity regularization."
      },
      "w_threshold": {
        "type": "float",
        "range": [0.1, 0.5],
        "suggested_values": [0.1, 0.3, 0.5],
        "description": "Threshold for edge weights."
      }
    },
    "NOTEARSNolinear": {
      "lambda1": {
        "type": "float",
        "range": [0.001, 0.1],
        "suggested_values": [0.001, 0.01, 0.1],
        "description": "Regularization for sparsity."
      },
      "lambda2": {
        "type": "float",
        "suggested_values": [0.01, 0.1],
        "description": "Regularization for DAG constraint."
      },
      "w_threshold": {
        "type": "float",
        "range": [0.1, 0.5],
        "suggested_values": [0.1, 0.3, 0.5],
        "description": "Threshold for edge weights."
      },
      "h_tol": {
        "type": "float",
        "suggested_values": [1e-8, 1e-10],
        "description": "Tolerance for acyclicity constraint."
      }
    },
    "PCMCI": {
      "cond_ind_test": {
        "type": "string",
        "values": ["parcorr", "gpdc", "gsq", "cmi"],
        "description": "Independence test by data characteristics."
      },
      "tau_max": {
        "type": "integer",
        "range": [1, 10],
        "suggested_values": [1, 5, 10],
        "description": "Maximum time lag for causal analysis."
      },
      "pc_alpha": {
        "type": "float",
        "range": [0.01, 0.1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level for PC algorithm phase."
      },
      "alpha_level": {
        "type": "float",
        "range": [0.01, 0.1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance threshold for final graph."
      }
    },
    "PCParallel": {
      "alpha": {
        "type": "float",
        "range": [0, 1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level for causal discovery."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Independence test by data type."
      },
      "uc_rule": {
        "type": "integer",
        "values": [1, 2],
        "description": "Update rule: 1=majority, 2=conservative."
      }
    },
    "VARLiNGAM": {
      "lags": {
        "type": "integer",
        "range": [1, 10],
        "suggested_values": [1, 3, 5],
        "description": "Number of time lags to include."
      },
      "criterion": {
        "type": "string",
        "values": ["aic", "bic"],
        "description": "Model selection criterion."
      },
      "prune": {
        "type": "float",
        "range": [0, 1],
        "description": "Threshold for pruning weak connections."
      }
    },
    "CALM": {
      "loss_fn": {
        "type": "string",
        "values": ["mse", "ce"],
        "description": "Loss function: mse (continuous) or ce (categorical)."
      },
      "hidden_dims": {
        "type": "array",
        "example": [64, 64],
        "description": "Size of hidden layers in neural network."
      },
      "learning_rate": {
        "type": "float",
        "range": [0.0001, 0.01],
        "suggested_values": [0.0001, 0.001, 0.01],
        "description": "Step size for optimization."
      }
    },
    "CORL": {
      "alpha": {
        "type": "float",
        "range": [0.01, 0.1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Regularization parameter for sparsity."
      },
      "beta": {
        "type": "float",
        "range": [0.1, 10],
        "suggested_values": [0.1, 1, 10],
        "description": "Trade-off between sparsity and reconstruction."
      }
    },
    "DYNOTEARS": {
      "p": {
        "type": "integer",
        "range": [1, 10],
        "suggested_values": [2, 5, 10],
        "description": "Lookback window length for time-lagged causal relations."
      },
      "lambda_w": {
        "type": "float",
        "range": [0.01, 1],
        "suggested_values": [0.01, 0.1, 1],
        "description": "L1 regularization for intra-slice edges."
      },
      "lambda_a": {
        "type": "float",
        "range": [0.01, 1],
        "suggested_values": [0.01, 0.1, 1],
        "description": "L1 regularization for inter-slice edges."
      },
      "w_threshold": {
        "type": "float",
        "range": [0.01, 0.5],
        "suggested_values": [0.05, 0.1, 0.2],
        "description": "Threshold for edge weights."
      }
    },
    "FGES": {
      "score": {
        "type": "string",
        "values": ["bic-score", "bdeu-score"],
        "description": "Scoring function: bic-score (continuous) or bdeu-score (discrete)."
      },
      "max-degree": {
        "type": "integer",
        "range": [1, 10],
        "suggested_values": [3, 5, 7],
        "description": "Maximum number of parents per node."
      }
    },
    "GOLEM": {
      "lambda_1": {
        "type": "float",
        "range": [0.001, 0.1],
        "suggested_values": [0.001, 0.01, 0.1],
        "description": "L1 regularization parameter for sparsity."
      },
      "num_iter": {
        "type": "integer",
        "range": [10000, 100000],
        "suggested_values": [10000, 50000, 100000],
        "description": "Maximum optimization iterations."
      },
      "graph_thres": {
        "type": "float",
        "range": [0.1, 0.5],
        "suggested_values": [0.1, 0.3, 0.5],
        "description": "Threshold for edge weights."
      }
    },
    "Hybrid": {
      "alpha": {
        "type": "float",
        "range": [0.01, 0.1],
        "suggested_values": [0.01, 0.05, 0.1],
        "description": "Significance level for independence tests."
      },
      "indep_test": {
        "type": "string",
        "values": ["fisherz", "chisq", "gsq"],
        "description": "Independence test method by data type."
      },
      "lambda_r": {
        "type": "float",
        "range": [0.001, 0.1],
        "description": "L1 regularization parameter for regression."
      },
      "learning_rate": {
        "type": "float",
        "range": [0.0001, 0.01],
        "suggested_values": [0.001],
        "description": "Step size for gradient-based optimization."
      }
    },
    "XGES": {
      "score": {
        "type": "string",
        "values": ["bic-score", "bdeu-score"],
        "description": "Scoring function by data type."
      },
      "max-degree": {
        "type": "integer",
        "range": [1, 10],
        "suggested_values": [3, 5, 7],
        "description": "Maximum parents per node."
      }
    }
  }